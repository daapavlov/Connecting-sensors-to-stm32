
TmpSPICmsis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004a0  20000078  08002c64  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000518  08002c64  00020518  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009a2f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001deb  00000000  00000000  00029ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00002b56  00000000  00000000  0002b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000558  00000000  00000000  0002e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000530  00000000  00000000  0002e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020df4  00000000  00000000  0002eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000974d  00000000  00000000  0004fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c47d8  00000000  00000000  000593e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011dbb9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000e84  00000000  00000000  0011dc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ba0 	.word	0x08002ba0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08002ba0 	.word	0x08002ba0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_uldivmod>:
 8000b70:	b953      	cbnz	r3, 8000b88 <__aeabi_uldivmod+0x18>
 8000b72:	b94a      	cbnz	r2, 8000b88 <__aeabi_uldivmod+0x18>
 8000b74:	2900      	cmp	r1, #0
 8000b76:	bf08      	it	eq
 8000b78:	2800      	cmpeq	r0, #0
 8000b7a:	bf1c      	itt	ne
 8000b7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b80:	f04f 30ff 	movne.w	r0, #4294967295
 8000b84:	f000 b96e 	b.w	8000e64 <__aeabi_idiv0>
 8000b88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b90:	f000 f806 	bl	8000ba0 <__udivmoddi4>
 8000b94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	9d08      	ldr	r5, [sp, #32]
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	468c      	mov	ip, r1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f040 8083 	bne.w	8000cb6 <__udivmoddi4+0x116>
 8000bb0:	428a      	cmp	r2, r1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	d947      	bls.n	8000c46 <__udivmoddi4+0xa6>
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	b142      	cbz	r2, 8000bce <__udivmoddi4+0x2e>
 8000bbc:	f1c2 0020 	rsb	r0, r2, #32
 8000bc0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	4097      	lsls	r7, r2
 8000bc8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bcc:	4094      	lsls	r4, r2
 8000bce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bd2:	0c23      	lsrs	r3, r4, #16
 8000bd4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd8:	fa1f fe87 	uxth.w	lr, r7
 8000bdc:	fb08 c116 	mls	r1, r8, r6, ip
 8000be0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be4:	fb06 f10e 	mul.w	r1, r6, lr
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x60>
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bf2:	f080 8119 	bcs.w	8000e28 <__udivmoddi4+0x288>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 8116 	bls.w	8000e28 <__udivmoddi4+0x288>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	443b      	add	r3, r7
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x8c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	f080 8105 	bcs.w	8000e2c <__udivmoddi4+0x28c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8102 	bls.w	8000e2c <__udivmoddi4+0x28c>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c30:	eba4 040e 	sub.w	r4, r4, lr
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa0>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	b902      	cbnz	r2, 8000c4a <__udivmoddi4+0xaa>
 8000c48:	deff      	udf	#255	; 0xff
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	d150      	bne.n	8000cf4 <__udivmoddi4+0x154>
 8000c52:	1bcb      	subs	r3, r1, r7
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f f887 	uxth.w	r8, r7
 8000c5c:	2601      	movs	r6, #1
 8000c5e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c62:	0c21      	lsrs	r1, r4, #16
 8000c64:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0xe4>
 8000c74:	1879      	adds	r1, r7, r1
 8000c76:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0xe2>
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	f200 80e9 	bhi.w	8000e54 <__udivmoddi4+0x2b4>
 8000c82:	4684      	mov	ip, r0
 8000c84:	1ac9      	subs	r1, r1, r3
 8000c86:	b2a3      	uxth	r3, r4
 8000c88:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c8c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c90:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c94:	fb08 f800 	mul.w	r8, r8, r0
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x10c>
 8000c9c:	193c      	adds	r4, r7, r4
 8000c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x10a>
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	f200 80d9 	bhi.w	8000e5c <__udivmoddi4+0x2bc>
 8000caa:	4618      	mov	r0, r3
 8000cac:	eba4 0408 	sub.w	r4, r4, r8
 8000cb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb4:	e7bf      	b.n	8000c36 <__udivmoddi4+0x96>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0x12e>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80b1 	beq.w	8000e22 <__udivmoddi4+0x282>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x1cc>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0x140>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80b8 	bhi.w	8000e50 <__udivmoddi4+0x2b0>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	468c      	mov	ip, r1
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0a8      	beq.n	8000c40 <__udivmoddi4+0xa0>
 8000cee:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cf2:	e7a5      	b.n	8000c40 <__udivmoddi4+0xa0>
 8000cf4:	f1c2 0320 	rsb	r3, r2, #32
 8000cf8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cfc:	4097      	lsls	r7, r2
 8000cfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000d02:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d06:	40d9      	lsrs	r1, r3
 8000d08:	4330      	orrs	r0, r6
 8000d0a:	0c03      	lsrs	r3, r0, #16
 8000d0c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f108 	mul.w	r1, r6, r8
 8000d20:	4299      	cmp	r1, r3
 8000d22:	fa04 f402 	lsl.w	r4, r4, r2
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x19c>
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2e:	f080 808d 	bcs.w	8000e4c <__udivmoddi4+0x2ac>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 808a 	bls.w	8000e4c <__udivmoddi4+0x2ac>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	443b      	add	r3, r7
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b281      	uxth	r1, r0
 8000d40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb00 f308 	mul.w	r3, r0, r8
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x1c4>
 8000d54:	1879      	adds	r1, r7, r1
 8000d56:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d5a:	d273      	bcs.n	8000e44 <__udivmoddi4+0x2a4>
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d971      	bls.n	8000e44 <__udivmoddi4+0x2a4>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4439      	add	r1, r7
 8000d64:	1acb      	subs	r3, r1, r3
 8000d66:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d6a:	e778      	b.n	8000c5e <__udivmoddi4+0xbe>
 8000d6c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d70:	fa03 f406 	lsl.w	r4, r3, r6
 8000d74:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d78:	431c      	orrs	r4, r3
 8000d7a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d86:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d8a:	431f      	orrs	r7, r3
 8000d8c:	0c3b      	lsrs	r3, r7, #16
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fa1f f884 	uxth.w	r8, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9e:	fb09 fa08 	mul.w	sl, r9, r8
 8000da2:	458a      	cmp	sl, r1
 8000da4:	fa02 f206 	lsl.w	r2, r2, r6
 8000da8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x220>
 8000dae:	1861      	adds	r1, r4, r1
 8000db0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db4:	d248      	bcs.n	8000e48 <__udivmoddi4+0x2a8>
 8000db6:	458a      	cmp	sl, r1
 8000db8:	d946      	bls.n	8000e48 <__udivmoddi4+0x2a8>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4421      	add	r1, r4
 8000dc0:	eba1 010a 	sub.w	r1, r1, sl
 8000dc4:	b2bf      	uxth	r7, r7
 8000dc6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dca:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dd2:	fb00 f808 	mul.w	r8, r0, r8
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x24a>
 8000dda:	19e7      	adds	r7, r4, r7
 8000ddc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de0:	d22e      	bcs.n	8000e40 <__udivmoddi4+0x2a0>
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d92c      	bls.n	8000e40 <__udivmoddi4+0x2a0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4427      	add	r7, r4
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	eba7 0708 	sub.w	r7, r7, r8
 8000df2:	fba0 8902 	umull	r8, r9, r0, r2
 8000df6:	454f      	cmp	r7, r9
 8000df8:	46c6      	mov	lr, r8
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	d31a      	bcc.n	8000e34 <__udivmoddi4+0x294>
 8000dfe:	d017      	beq.n	8000e30 <__udivmoddi4+0x290>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x27a>
 8000e02:	ebb3 020e 	subs.w	r2, r3, lr
 8000e06:	eb67 0701 	sbc.w	r7, r7, r1
 8000e0a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0e:	40f2      	lsrs	r2, r6
 8000e10:	ea4c 0202 	orr.w	r2, ip, r2
 8000e14:	40f7      	lsrs	r7, r6
 8000e16:	e9c5 2700 	strd	r2, r7, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	462e      	mov	r6, r5
 8000e24:	4628      	mov	r0, r5
 8000e26:	e70b      	b.n	8000c40 <__udivmoddi4+0xa0>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	e6e9      	b.n	8000c00 <__udivmoddi4+0x60>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6fd      	b.n	8000c2c <__udivmoddi4+0x8c>
 8000e30:	4543      	cmp	r3, r8
 8000e32:	d2e5      	bcs.n	8000e00 <__udivmoddi4+0x260>
 8000e34:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e38:	eb69 0104 	sbc.w	r1, r9, r4
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	e7df      	b.n	8000e00 <__udivmoddi4+0x260>
 8000e40:	4608      	mov	r0, r1
 8000e42:	e7d2      	b.n	8000dea <__udivmoddi4+0x24a>
 8000e44:	4660      	mov	r0, ip
 8000e46:	e78d      	b.n	8000d64 <__udivmoddi4+0x1c4>
 8000e48:	4681      	mov	r9, r0
 8000e4a:	e7b9      	b.n	8000dc0 <__udivmoddi4+0x220>
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	e775      	b.n	8000d3c <__udivmoddi4+0x19c>
 8000e50:	4630      	mov	r0, r6
 8000e52:	e74a      	b.n	8000cea <__udivmoddi4+0x14a>
 8000e54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e58:	4439      	add	r1, r7
 8000e5a:	e713      	b.n	8000c84 <__udivmoddi4+0xe4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	443c      	add	r4, r7
 8000e60:	e724      	b.n	8000cac <__udivmoddi4+0x10c>
 8000e62:	bf00      	nop

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_InitTick+0x40>)
 8000e6e:	7818      	ldrb	r0, [r3, #0]
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <HAL_InitTick+0x44>)
 8000e7a:	6810      	ldr	r0, [r2, #0]
 8000e7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e80:	f000 f896 	bl	8000fb0 <HAL_SYSTICK_Config>
 8000e84:	b968      	cbnz	r0, 8000ea2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	2c0f      	cmp	r4, #15
 8000e88:	d901      	bls.n	8000e8e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e00a      	b.n	8000ea4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4621      	mov	r1, r4
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	f000 f849 	bl	8000f2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9a:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_InitTick+0x40>)
 8000e9c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ea2:	2001      	movs	r0, #1
}
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_Init>:
{
 8000eb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_Init+0x30>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ec2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f81b 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ffc8 	bl	8000e68 <HAL_InitTick>
  HAL_MspInit();
 8000ed8:	f001 fcd6 	bl	8002888 <HAL_MspInit>
}
 8000edc:	2000      	movs	r0, #0
 8000ede:	bd08      	pop	{r3, pc}
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x10>)
 8000ee6:	6811      	ldr	r1, [r2, #0]
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_IncTick+0x14>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	440b      	add	r3, r1
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000098 	.word	0x20000098
 8000ef8:	20000000 	.word	0x20000000

08000efc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000efc:	4b01      	ldr	r3, [pc, #4]	; (8000f04 <HAL_GetTick+0x8>)
 8000efe:	6818      	ldr	r0, [r3, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000098 	.word	0x20000098

08000f08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f0a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	0200      	lsls	r0, r0, #8
 8000f16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f24:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_NVIC_SetPriority+0x60>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f36:	f1c3 0407 	rsb	r4, r3, #7
 8000f3a:	2c04      	cmp	r4, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f40:	1d1d      	adds	r5, r3, #4
 8000f42:	2d06      	cmp	r5, #6
 8000f44:	d918      	bls.n	8000f78 <HAL_NVIC_SetPriority+0x4c>
 8000f46:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 35ff 	mov.w	r5, #4294967295
 8000f4c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f50:	ea21 0104 	bic.w	r1, r1, r4
 8000f54:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f56:	fa05 f303 	lsl.w	r3, r5, r3
 8000f5a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f60:	2800      	cmp	r0, #0
 8000f62:	db0b      	blt.n	8000f7c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	0109      	lsls	r1, r1, #4
 8000f66:	b2c9      	uxtb	r1, r1
 8000f68:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f6c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f70:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f74:	bc30      	pop	{r4, r5}
 8000f76:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e7e5      	b.n	8000f48 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	f000 000f 	and.w	r0, r0, #15
 8000f80:	0109      	lsls	r1, r1, #4
 8000f82:	b2c9      	uxtb	r1, r1
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <HAL_NVIC_SetPriority+0x64>)
 8000f86:	5419      	strb	r1, [r3, r0]
 8000f88:	e7f4      	b.n	8000f74 <HAL_NVIC_SetPriority+0x48>
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	e000ed14 	.word	0xe000ed14

08000f94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	db07      	blt.n	8000fa8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f98:	f000 021f 	and.w	r2, r0, #31
 8000f9c:	0940      	lsrs	r0, r0, #5
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	4a02      	ldr	r2, [pc, #8]	; (8000fac <HAL_NVIC_EnableIRQ+0x18>)
 8000fa4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	3801      	subs	r0, #1
 8000fb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fb6:	d20a      	bcs.n	8000fce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_SYSTICK_Config+0x24>)
 8000fba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_SYSTICK_Config+0x28>)
 8000fbe:	21f0      	movs	r1, #240	; 0xf0
 8000fc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fdc:	2804      	cmp	r0, #4
 8000fde:	d005      	beq.n	8000fec <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000fe2:	6813      	ldr	r3, [r2, #0]
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6013      	str	r3, [r2, #0]
  }
}
 8000fea:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fec:	4a02      	ldr	r2, [pc, #8]	; (8000ff8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ffc:	4770      	bx	lr

08000ffe <HAL_SYSTICK_IRQHandler>:
{
 8000ffe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001000:	f7ff fffc 	bl	8000ffc <HAL_SYSTICK_Callback>
}
 8001004:	bd08      	pop	{r3, pc}
	...

08001008 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001008:	b510      	push	{r4, lr}
 800100a:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_PWREx_EnableOverDrive+0x70>)
 8001012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001014:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_PWREx_EnableOverDrive+0x74>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800102a:	f7ff ff67 	bl	8000efc <HAL_GetTick>
 800102e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_PWREx_EnableOverDrive+0x78>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001038:	d108      	bne.n	800104c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800103a:	f7ff ff5f 	bl	8000efc <HAL_GetTick>
 800103e:	1b00      	subs	r0, r0, r4
 8001040:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001044:	d9f4      	bls.n	8001030 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001046:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001048:	b002      	add	sp, #8
 800104a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_PWREx_EnableOverDrive+0x7c>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001052:	f7ff ff53 	bl	8000efc <HAL_GetTick>
 8001056:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_PWREx_EnableOverDrive+0x78>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001060:	d107      	bne.n	8001072 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001062:	f7ff ff4b 	bl	8000efc <HAL_GetTick>
 8001066:	1b00      	subs	r0, r0, r4
 8001068:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800106c:	d9f4      	bls.n	8001058 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800106e:	2003      	movs	r0, #3
 8001070:	e7ea      	b.n	8001048 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001072:	2000      	movs	r0, #0
 8001074:	e7e8      	b.n	8001048 <HAL_PWREx_EnableOverDrive+0x40>
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	420e0040 	.word	0x420e0040
 8001080:	40007000 	.word	0x40007000
 8001084:	420e0044 	.word	0x420e0044

08001088 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001088:	2800      	cmp	r0, #0
 800108a:	f000 809b 	beq.w	80011c4 <HAL_RCC_ClockConfig+0x13c>
{
 800108e:	b570      	push	{r4, r5, r6, lr}
 8001090:	460d      	mov	r5, r1
 8001092:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001094:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_RCC_ClockConfig+0x14c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	428b      	cmp	r3, r1
 800109e:	d208      	bcs.n	80010b2 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a0:	b2cb      	uxtb	r3, r1
 80010a2:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <HAL_RCC_ClockConfig+0x14c>)
 80010a4:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f003 030f 	and.w	r3, r3, #15
 80010ac:	428b      	cmp	r3, r1
 80010ae:	f040 808b 	bne.w	80011c8 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	f013 0f02 	tst.w	r3, #2
 80010b8:	d017      	beq.n	80010ea <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ba:	f013 0f04 	tst.w	r3, #4
 80010be:	d004      	beq.n	80010ca <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c0:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 80010c2:	6893      	ldr	r3, [r2, #8]
 80010c4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010c8:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f013 0f08 	tst.w	r3, #8
 80010d0:	d004      	beq.n	80010dc <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d2:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 80010d4:	6893      	ldr	r3, [r2, #8]
 80010d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010dc:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 80010de:	6893      	ldr	r3, [r2, #8]
 80010e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010e4:	68a1      	ldr	r1, [r4, #8]
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	f013 0f01 	tst.w	r3, #1
 80010f0:	d032      	beq.n	8001158 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d021      	beq.n	800113c <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f8:	1e9a      	subs	r2, r3, #2
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	d925      	bls.n	800114a <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	4a36      	ldr	r2, [pc, #216]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	f012 0f02 	tst.w	r2, #2
 8001106:	d061      	beq.n	80011cc <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001108:	4933      	ldr	r1, [pc, #204]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 800110a:	688a      	ldr	r2, [r1, #8]
 800110c:	f022 0203 	bic.w	r2, r2, #3
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001114:	f7ff fef2 	bl	8000efc <HAL_GetTick>
 8001118:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001128:	d016      	beq.n	8001158 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112a:	f7ff fee7 	bl	8000efc <HAL_GetTick>
 800112e:	1b80      	subs	r0, r0, r6
 8001130:	f241 3388 	movw	r3, #5000	; 0x1388
 8001134:	4298      	cmp	r0, r3
 8001136:	d9f0      	bls.n	800111a <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8001138:	2003      	movs	r0, #3
 800113a:	e042      	b.n	80011c2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113c:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001144:	d1e0      	bne.n	8001108 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001146:	2001      	movs	r0, #1
 8001148:	e03b      	b.n	80011c2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001152:	d1d9      	bne.n	8001108 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
 8001156:	e034      	b.n	80011c2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_RCC_ClockConfig+0x14c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	42ab      	cmp	r3, r5
 8001162:	d907      	bls.n	8001174 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001164:	b2ea      	uxtb	r2, r5
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_RCC_ClockConfig+0x14c>)
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	42ab      	cmp	r3, r5
 8001172:	d12d      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	f013 0f04 	tst.w	r3, #4
 800117a:	d006      	beq.n	800118a <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 800117e:	6893      	ldr	r3, [r2, #8]
 8001180:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001184:	68e1      	ldr	r1, [r4, #12]
 8001186:	430b      	orrs	r3, r1
 8001188:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	f013 0f08 	tst.w	r3, #8
 8001190:	d007      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 8001194:	6893      	ldr	r3, [r2, #8]
 8001196:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800119a:	6921      	ldr	r1, [r4, #16]
 800119c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011a0:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a2:	f000 f827 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_RCC_ClockConfig+0x150>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_RCC_ClockConfig+0x154>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	40d8      	lsrs	r0, r3
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RCC_ClockConfig+0x158>)
 80011b6:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_RCC_ClockConfig+0x15c>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f7ff fe54 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 80011c0:	2000      	movs	r0, #0
}
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80011c4:	2001      	movs	r0, #1
}
 80011c6:	4770      	bx	lr
      return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e7fa      	b.n	80011c2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80011cc:	2001      	movs	r0, #1
 80011ce:	e7f8      	b.n	80011c2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
 80011d2:	e7f6      	b.n	80011c2 <HAL_RCC_ClockConfig+0x13a>
 80011d4:	40023c00 	.word	0x40023c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	08002bb8 	.word	0x08002bb8
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d007      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0x1e>
 8001202:	2b0c      	cmp	r3, #12
 8001204:	d041      	beq.n	800128a <HAL_RCC_GetSysClockFreq+0x96>
 8001206:	2b04      	cmp	r3, #4
 8001208:	d001      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x1a>
 800120a:	483e      	ldr	r0, [pc, #248]	; (8001304 <HAL_RCC_GetSysClockFreq+0x110>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800120c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sysclockfreq = HSE_VALUE;
 800120e:	483e      	ldr	r0, [pc, #248]	; (8001308 <HAL_RCC_GetSysClockFreq+0x114>)
 8001210:	e7fc      	b.n	800120c <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001220:	d012      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001224:	6859      	ldr	r1, [r3, #4]
 8001226:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800122a:	2300      	movs	r3, #0
 800122c:	4836      	ldr	r0, [pc, #216]	; (8001308 <HAL_RCC_GetSysClockFreq+0x114>)
 800122e:	fba1 0100 	umull	r0, r1, r1, r0
 8001232:	f7ff fc9d 	bl	8000b70 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001236:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800123e:	3301      	adds	r3, #1
 8001240:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001242:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001246:	e7e1      	b.n	800120c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001250:	0158      	lsls	r0, r3, #5
 8001252:	2100      	movs	r1, #0
 8001254:	1ac0      	subs	r0, r0, r3
 8001256:	f161 0100 	sbc.w	r1, r1, #0
 800125a:	018e      	lsls	r6, r1, #6
 800125c:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8001260:	0187      	lsls	r7, r0, #6
 8001262:	1a3c      	subs	r4, r7, r0
 8001264:	eb66 0501 	sbc.w	r5, r6, r1
 8001268:	00e9      	lsls	r1, r5, #3
 800126a:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 800126e:	00e0      	lsls	r0, r4, #3
 8001270:	18c0      	adds	r0, r0, r3
 8001272:	f141 0100 	adc.w	r1, r1, #0
 8001276:	028b      	lsls	r3, r1, #10
 8001278:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800127c:	0284      	lsls	r4, r0, #10
 800127e:	4620      	mov	r0, r4
 8001280:	4619      	mov	r1, r3
 8001282:	2300      	movs	r3, #0
 8001284:	f7ff fc74 	bl	8000b70 <__aeabi_uldivmod>
 8001288:	e7d5      	b.n	8001236 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001298:	d010      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 800129c:	6859      	ldr	r1, [r3, #4]
 800129e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012a2:	2300      	movs	r3, #0
 80012a4:	4818      	ldr	r0, [pc, #96]	; (8001308 <HAL_RCC_GetSysClockFreq+0x114>)
 80012a6:	fba1 0100 	umull	r0, r1, r1, r0
 80012aa:	f7ff fc61 	bl	8000b70 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80012b6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80012ba:	e7a7      	b.n	800120c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_RCC_GetSysClockFreq+0x10c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80012c4:	015c      	lsls	r4, r3, #5
 80012c6:	2500      	movs	r5, #0
 80012c8:	1ae4      	subs	r4, r4, r3
 80012ca:	f165 0500 	sbc.w	r5, r5, #0
 80012ce:	01ae      	lsls	r6, r5, #6
 80012d0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80012d4:	01a7      	lsls	r7, r4, #6
 80012d6:	1b38      	subs	r0, r7, r4
 80012d8:	eb66 0105 	sbc.w	r1, r6, r5
 80012dc:	00cc      	lsls	r4, r1, #3
 80012de:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80012e2:	00c5      	lsls	r5, r0, #3
 80012e4:	18e8      	adds	r0, r5, r3
 80012e6:	f144 0100 	adc.w	r1, r4, #0
 80012ea:	028b      	lsls	r3, r1, #10
 80012ec:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80012f0:	0284      	lsls	r4, r0, #10
 80012f2:	4620      	mov	r0, r4
 80012f4:	4619      	mov	r1, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	f7ff fc3a 	bl	8000b70 <__aeabi_uldivmod>
 80012fc:	e7d7      	b.n	80012ae <HAL_RCC_GetSysClockFreq+0xba>
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	00f42400 	.word	0x00f42400
 8001308:	017d7840 	.word	0x017d7840

0800130c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800130c:	2800      	cmp	r0, #0
 800130e:	f000 8201 	beq.w	8001714 <HAL_RCC_OscConfig+0x408>
{
 8001312:	b570      	push	{r4, r5, r6, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001318:	6803      	ldr	r3, [r0, #0]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	d041      	beq.n	80013a4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001320:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b04      	cmp	r3, #4
 800132a:	d032      	beq.n	8001392 <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800132c:	4ba2      	ldr	r3, [pc, #648]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001334:	2b08      	cmp	r3, #8
 8001336:	d027      	beq.n	8001388 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001338:	4b9f      	ldr	r3, [pc, #636]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d059      	beq.n	80013f8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d05b      	beq.n	8001404 <HAL_RCC_OscConfig+0xf8>
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d05e      	beq.n	8001410 <HAL_RCC_OscConfig+0x104>
 8001352:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001362:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001364:	6863      	ldr	r3, [r4, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d05c      	beq.n	8001424 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fdc7 	bl	8000efc <HAL_GetTick>
 800136e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	4b91      	ldr	r3, [pc, #580]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001378:	d114      	bne.n	80013a4 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137a:	f7ff fdbf 	bl	8000efc <HAL_GetTick>
 800137e:	1b40      	subs	r0, r0, r5
 8001380:	2864      	cmp	r0, #100	; 0x64
 8001382:	d9f5      	bls.n	8001370 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8001384:	2003      	movs	r0, #3
 8001386:	e1cc      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001388:	4b8b      	ldr	r3, [pc, #556]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001390:	d0d2      	beq.n	8001338 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800139a:	d003      	beq.n	80013a4 <HAL_RCC_OscConfig+0x98>
 800139c:	6863      	ldr	r3, [r4, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 81ba 	beq.w	8001718 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	f013 0f02 	tst.w	r3, #2
 80013aa:	d060      	beq.n	800146e <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013ac:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f013 0f0c 	tst.w	r3, #12
 80013b4:	d04a      	beq.n	800144c <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013b6:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d03f      	beq.n	8001442 <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80013ca:	2b0c      	cmp	r3, #12
 80013cc:	d068      	beq.n	80014a0 <HAL_RCC_OscConfig+0x194>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ce:	68e3      	ldr	r3, [r4, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d074      	beq.n	80014be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b79      	ldr	r3, [pc, #484]	; (80015bc <HAL_RCC_OscConfig+0x2b0>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fd8f 	bl	8000efc <HAL_GetTick>
 80013de:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b75      	ldr	r3, [pc, #468]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f013 0f02 	tst.w	r3, #2
 80013e8:	d160      	bne.n	80014ac <HAL_RCC_OscConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fd87 	bl	8000efc <HAL_GetTick>
 80013ee:	1b40      	subs	r0, r0, r5
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d9f5      	bls.n	80013e0 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80013f4:	2003      	movs	r0, #3
 80013f6:	e194      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f8:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001400:	d0a0      	beq.n	8001344 <HAL_RCC_OscConfig+0x38>
 8001402:	e7c6      	b.n	8001392 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	4a6c      	ldr	r2, [pc, #432]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e7a9      	b.n	8001364 <HAL_RCC_OscConfig+0x58>
 8001410:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e79f      	b.n	8001364 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001424:	f7ff fd6a 	bl	8000efc <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001432:	d0b7      	beq.n	80013a4 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fd62 	bl	8000efc <HAL_GetTick>
 8001438:	1b40      	subs	r0, r0, r5
 800143a:	2864      	cmp	r0, #100	; 0x64
 800143c:	d9f5      	bls.n	800142a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
 8001440:	e16f      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800144a:	d1ba      	bne.n	80013c2 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f013 0f02 	tst.w	r3, #2
 8001454:	d003      	beq.n	800145e <HAL_RCC_OscConfig+0x152>
 8001456:	68e3      	ldr	r3, [r4, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	f040 815f 	bne.w	800171c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4a56      	ldr	r2, [pc, #344]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001466:	6921      	ldr	r1, [r4, #16]
 8001468:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800146c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	f013 0f08 	tst.w	r3, #8
 8001474:	d047      	beq.n	8001506 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	6963      	ldr	r3, [r4, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d032      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_OscConfig+0x2b4>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fd3b 	bl	8000efc <HAL_GetTick>
 8001486:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001488:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f013 0f02 	tst.w	r3, #2
 8001490:	d139      	bne.n	8001506 <HAL_RCC_OscConfig+0x1fa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fd33 	bl	8000efc <HAL_GetTick>
 8001496:	1b40      	subs	r0, r0, r5
 8001498:	2802      	cmp	r0, #2
 800149a:	d9f5      	bls.n	8001488 <HAL_RCC_OscConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800149c:	2003      	movs	r0, #3
 800149e:	e140      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014a8:	d191      	bne.n	80013ce <HAL_RCC_OscConfig+0xc2>
 80014aa:	e7cf      	b.n	800144c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014b4:	6921      	ldr	r1, [r4, #16]
 80014b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e7d7      	b.n	800146e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x2b0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014c4:	f7ff fd1a 	bl	8000efc <HAL_GetTick>
 80014c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f013 0f02 	tst.w	r3, #2
 80014d2:	d0cc      	beq.n	800146e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fd12 	bl	8000efc <HAL_GetTick>
 80014d8:	1b40      	subs	r0, r0, r5
 80014da:	2802      	cmp	r0, #2
 80014dc:	d9f5      	bls.n	80014ca <HAL_RCC_OscConfig+0x1be>
            return HAL_TIMEOUT;
 80014de:	2003      	movs	r0, #3
 80014e0:	e11f      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x2b4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fd08 	bl	8000efc <HAL_GetTick>
 80014ec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f2:	f013 0f02 	tst.w	r3, #2
 80014f6:	d006      	beq.n	8001506 <HAL_RCC_OscConfig+0x1fa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fd00 	bl	8000efc <HAL_GetTick>
 80014fc:	1b40      	subs	r0, r0, r5
 80014fe:	2802      	cmp	r0, #2
 8001500:	d9f5      	bls.n	80014ee <HAL_RCC_OscConfig+0x1e2>
        {
          return HAL_TIMEOUT;
 8001502:	2003      	movs	r0, #3
 8001504:	e10d      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	f013 0f04 	tst.w	r3, #4
 800150c:	d078      	beq.n	8001600 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001516:	d133      	bne.n	8001580 <HAL_RCC_OscConfig+0x274>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001520:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001530:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f413 7f80 	tst.w	r3, #256	; 0x100
 800153a:	d023      	beq.n	8001584 <HAL_RCC_OscConfig+0x278>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	68a3      	ldr	r3, [r4, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d034      	beq.n	80015ac <HAL_RCC_OscConfig+0x2a0>
 8001542:	2b05      	cmp	r3, #5
 8001544:	d040      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2bc>
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	671a      	str	r2, [r3, #112]	; 0x70
 8001550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03e      	beq.n	80015dc <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fccd 	bl	8000efc <HAL_GetTick>
 8001562:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	f013 0f02 	tst.w	r3, #2
 800156c:	d147      	bne.n	80015fe <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fcc5 	bl	8000efc <HAL_GetTick>
 8001572:	1b80      	subs	r0, r0, r6
 8001574:	f241 3388 	movw	r3, #5000	; 0x1388
 8001578:	4298      	cmp	r0, r3
 800157a:	d9f3      	bls.n	8001564 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
 800157e:	e0d0      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8001580:	2500      	movs	r5, #0
 8001582:	e7d6      	b.n	8001532 <HAL_RCC_OscConfig+0x226>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_RCC_OscConfig+0x2b8>)
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800158e:	f7ff fcb5 	bl	8000efc <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_OscConfig+0x2b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f413 7f80 	tst.w	r3, #256	; 0x100
 800159c:	d1ce      	bne.n	800153c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff fcad 	bl	8000efc <HAL_GetTick>
 80015a2:	1b80      	subs	r0, r0, r6
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d9f5      	bls.n	8001594 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
 80015aa:	e0ba      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	4a02      	ldr	r2, [pc, #8]	; (80015b8 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	e7cf      	b.n	8001558 <HAL_RCC_OscConfig+0x24c>
 80015b8:	40023800 	.word	0x40023800
 80015bc:	42470000 	.word	0x42470000
 80015c0:	42470e80 	.word	0x42470e80
 80015c4:	40007000 	.word	0x40007000
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 80015ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015cc:	f042 0204 	orr.w	r2, r2, #4
 80015d0:	671a      	str	r2, [r3, #112]	; 0x70
 80015d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	671a      	str	r2, [r3, #112]	; 0x70
 80015da:	e7bd      	b.n	8001558 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fc8e 	bl	8000efc <HAL_GetTick>
 80015e0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	f013 0f02 	tst.w	r3, #2
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc86 	bl	8000efc <HAL_GetTick>
 80015f0:	1b80      	subs	r0, r0, r6
 80015f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80015f6:	4298      	cmp	r0, r3
 80015f8:	d9f3      	bls.n	80015e2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80015fa:	2003      	movs	r0, #3
 80015fc:	e091      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fe:	b9ed      	cbnz	r5, 800163c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001600:	69a3      	ldr	r3, [r4, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 808c 	beq.w	8001720 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 800160a:	6892      	ldr	r2, [r2, #8]
 800160c:	f002 020c 	and.w	r2, r2, #12
 8001610:	2a08      	cmp	r2, #8
 8001612:	d054      	beq.n	80016be <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001614:	2b02      	cmp	r3, #2
 8001616:	d017      	beq.n	8001648 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x43c>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fc6d 	bl	8000efc <HAL_GetTick>
 8001622:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800162c:	d045      	beq.n	80016ba <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fc65 	bl	8000efc <HAL_GetTick>
 8001632:	1b00      	subs	r0, r0, r4
 8001634:	2802      	cmp	r0, #2
 8001636:	d9f5      	bls.n	8001624 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001638:	2003      	movs	r0, #3
 800163a:	e072      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4a41      	ldr	r2, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 800163e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	e7db      	b.n	8001600 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x43c>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800164e:	f7ff fc55 	bl	8000efc <HAL_GetTick>
 8001652:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800165c:	d006      	beq.n	800166c <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fc4d 	bl	8000efc <HAL_GetTick>
 8001662:	1b40      	subs	r0, r0, r5
 8001664:	2802      	cmp	r0, #2
 8001666:	d9f5      	bls.n	8001654 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8001668:	2003      	movs	r0, #3
 800166a:	e05a      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166c:	69e3      	ldr	r3, [r4, #28]
 800166e:	6a22      	ldr	r2, [r4, #32]
 8001670:	4313      	orrs	r3, r2
 8001672:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001674:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001678:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800167a:	0852      	lsrs	r2, r2, #1
 800167c:	3a01      	subs	r2, #1
 800167e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001682:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001684:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001688:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800168a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 8001690:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_OscConfig+0x43c>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001698:	f7ff fc30 	bl	8000efc <HAL_GetTick>
 800169c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fc28 	bl	8000efc <HAL_GetTick>
 80016ac:	1b00      	subs	r0, r0, r4
 80016ae:	2802      	cmp	r0, #2
 80016b0:	d9f5      	bls.n	800169e <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80016b2:	2003      	movs	r0, #3
 80016b4:	e035      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80016b6:	2000      	movs	r0, #0
 80016b8:	e033      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 80016ba:	2000      	movs	r0, #0
 80016bc:	e031      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d031      	beq.n	8001726 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_OscConfig+0x438>)
 80016c4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80016ca:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	4291      	cmp	r1, r2
 80016ce:	d12c      	bne.n	800172a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	428a      	cmp	r2, r1
 80016d8:	d129      	bne.n	800172e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80016e0:	401a      	ands	r2, r3
 80016e2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80016e6:	d124      	bne.n	8001732 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80016ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016ee:	0852      	lsrs	r2, r2, #1
 80016f0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016f6:	d11e      	bne.n	8001736 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fe:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001702:	d11a      	bne.n	800173a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001704:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001708:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800170a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800170e:	d116      	bne.n	800173e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8001710:	2000      	movs	r0, #0
 8001712:	e006      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
}
 8001716:	4770      	bx	lr
        return HAL_ERROR;
 8001718:	2001      	movs	r0, #1
 800171a:	e002      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001720:	2000      	movs	r0, #0
}
 8001722:	b002      	add	sp, #8
 8001724:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001726:	2001      	movs	r0, #1
 8001728:	e7fb      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800172a:	2001      	movs	r0, #1
 800172c:	e7f9      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 800172e:	2001      	movs	r0, #1
 8001730:	e7f7      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 8001732:	2001      	movs	r0, #1
 8001734:	e7f5      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 8001736:	2001      	movs	r0, #1
 8001738:	e7f3      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 800173a:	2001      	movs	r0, #1
 800173c:	e7f1      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 800173e:	2001      	movs	r0, #1
 8001740:	e7ef      	b.n	8001722 <HAL_RCC_OscConfig+0x416>
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	42470060 	.word	0x42470060

0800174c <Init_ADC1>:
#include "ADC_function.h"


void Init_ADC1(void)
{
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; //ВКЛЮЧЕНИЕ ТАКТИРОВАНИЯ АЦП
 800174c:	4a11      	ldr	r2, [pc, #68]	; (8001794 <Init_ADC1+0x48>)
 800174e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6453      	str	r3, [r2, #68]	; 0x44

	ADC1->CR1 = 0;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <Init_ADC1+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 800175c:	609a      	str	r2, [r3, #8]

//	ADC1->CR1 |= 0b0000<<ADC_CR1_AWDCH_Pos | 0b00001<<ADC_CR1_AWDCH_Pos; //ВЫБОР СТОРОЖЕВОГО КАНАЛА (КАНАЛЫ 0 И 1)
	ADC1->CR1 |= 0b001<<ADC_CR1_DISCNUM_Pos;
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001764:	605a      	str	r2, [r3, #4]
	ADC1->CR1 |= ADC_CR1_SCAN;
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800176c:	605a      	str	r2, [r3, #4]

	ADC1->SMPR2 |= 0b000<<ADC_SMPR2_SMP0_Pos | 0b000<<ADC_SMPR2_SMP1_Pos; //ВЫБОР 3 ЦИКЛОВ НУЛЕВОГО И ПЕРВОГО КАНАЛОВ
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	611a      	str	r2, [r3, #16]
	ADC1->SQR1 |= 0b0001<<ADC_SQR1_L_Pos; //НАСТРОЙКА ОДНОГО ПРЕОБРАЗОВАНИЯ ДВУХ КАНАЛОВ
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 |= 0;
 800177a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
//	ADC1->SQR3 |= 0b00001<<ADC_SQR3_SQ1_Pos | 0b00010<<ADC_SQR3_SQ2_Pos;

	ADC->CCR |= 0b01<<ADC_CCR_ADCPRE_Pos; //ВЫБОР ПРЕДДЕЛИТЕЛЯ ДЛЯ АЦП (ПРЕДДЕЛИТЕЛЬ 4)
 800177e:	4907      	ldr	r1, [pc, #28]	; (800179c <Init_ADC1+0x50>)
 8001780:	684a      	ldr	r2, [r1, #4]
 8001782:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001786:	604a      	str	r2, [r1, #4]

	ADC1->CR2 |= ADC_CR2_ADON; //РАЗРЕШИТЬ АЦП
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40012000 	.word	0x40012000
 800179c:	40012300 	.word	0x40012300

080017a0 <ADC1_Read>:
uint16_t ADC1_Read(void)
{
	uint16_t Result;
	while(!(ADC1->SR & ADC_SR_EOC))//ПРОВЕРКА ФЛАГА ПРЕОБРАЗОВАНИЯ ОБЫЧНОГО КАНАЛА
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <ADC1_Read+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f013 0f02 	tst.w	r3, #2
 80017a8:	d0fa      	beq.n	80017a0 <ADC1_Read>
	{
	}
	Result = ADC1->DR; //СЧИТЫВАНИЯ ИЗ ПАМЯТИ ДАННЫХ
 80017aa:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <ADC1_Read+0x14>)
 80017ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c

	return Result;
}
 80017ae:	b280      	uxth	r0, r0
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40012000 	.word	0x40012000

080017b8 <ADC1_Start>:
void ADC1_Start(void)
{
	if(ADC1->CR2 & ADC_CR2_ADON)//ПРОВЕРКА УСТАНОВКИ БИТА РАЗРЕШЕНИЯ РАБОТЫ АЦП
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <ADC1_Start+0x18>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f013 0f01 	tst.w	r3, #1
 80017c0:	d004      	beq.n	80017cc <ADC1_Start+0x14>
	{
		ADC1->CR2 |= ADC_CR2_SWSTART; //ЗАПУСК АЦП
 80017c2:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <ADC1_Start+0x18>)
 80017c4:	6893      	ldr	r3, [r2, #8]
 80017c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017ca:	6093      	str	r3, [r2, #8]
	}
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	00000000 	.word	0x00000000

080017d8 <RTDTemperatureMeasurement>:
#include "TSP_DTS054-100P.h"



double RTDTemperatureMeasurement(double Voltage)
{
 80017d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017dc:	ec55 4b10 	vmov	r4, r5, d0
	double TemperatureRTD = 0, TemperatureRTDfiltr = 0;;
	double Amperage = 0.0195, Resistors0 = 100.0, ResistorsTSP100;
//	double k2 = 0.00282;
	double k2 = 0.0036;
	int a=0; //СЧЕТЧИК ДЛЯ WHILE
	ResistorsTSP100 = Voltage/Amperage; //ВЫЧИСЛЕНИЕ СОПРОТИВЛЕНИЯ RTD ПРИ ПОСТОЯННОЙ СИЛЕ ТОКА
 80017e0:	a330      	add	r3, pc, #192	; (adr r3, 80018a4 <RTDTemperatureMeasurement+0xcc>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	ee10 0a10 	vmov	r0, s0
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fff2 	bl	80007d4 <__aeabi_ddiv>
 80017f0:	4606      	mov	r6, r0
 80017f2:	460f      	mov	r7, r1

	if(Voltage > 0.0 && Voltage < 3.3)
 80017f4:	2200      	movs	r2, #0
 80017f6:	2300      	movs	r3, #0
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7ff f950 	bl	8000aa0 <__aeabi_dcmpgt>
 8001800:	2800      	cmp	r0, #0
 8001802:	d03b      	beq.n	800187c <RTDTemperatureMeasurement+0xa4>
 8001804:	a329      	add	r3, pc, #164	; (adr r3, 80018ac <RTDTemperatureMeasurement+0xd4>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7ff f929 	bl	8000a64 <__aeabi_dcmplt>
 8001812:	b918      	cbnz	r0, 800181c <RTDTemperatureMeasurement+0x44>
		}
		return sqrt(TemperatureRTDfiltr / 10.0);
	}
	else
	{
		return 0;
 8001814:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001888 <RTDTemperatureMeasurement+0xb0>
	}
}
 8001818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int a=0; //СЧЕТЧИК ДЛЯ WHILE
 800181c:	f04f 0800 	mov.w	r8, #0
	double TemperatureRTD = 0, TemperatureRTDfiltr = 0;;
 8001820:	2400      	movs	r4, #0
 8001822:	2500      	movs	r5, #0
		while(a<10)
 8001824:	f1b8 0f09 	cmp.w	r8, #9
 8001828:	dc1d      	bgt.n	8001866 <RTDTemperatureMeasurement+0x8e>
			TemperatureRTD = (ResistorsTSP100 / Resistors0 - 1.0) / k2; //ВЫЧИСЛЕНИЕ ТЕМПЕРАТУРЫ ПО ФОРМУЛЕ ГОСТ 6651-2009
 800182a:	2200      	movs	r2, #0
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <RTDTemperatureMeasurement+0xc0>)
 800182e:	4630      	mov	r0, r6
 8001830:	4639      	mov	r1, r7
 8001832:	f7fe ffcf 	bl	80007d4 <__aeabi_ddiv>
 8001836:	2200      	movs	r2, #0
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <RTDTemperatureMeasurement+0xc4>)
 800183a:	f7fe fce9 	bl	8000210 <__aeabi_dsub>
 800183e:	a314      	add	r3, pc, #80	; (adr r3, 8001890 <RTDTemperatureMeasurement+0xb8>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe ffc6 	bl	80007d4 <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 			TemperatureRTDfiltr = TemperatureRTD * TemperatureRTD + TemperatureRTDfiltr;
 800184c:	f7fe fe98 	bl	8000580 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fcdc 	bl	8000214 <__adddf3>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
			a++;
 8001860:	f108 0801 	add.w	r8, r8, #1
 8001864:	e7de      	b.n	8001824 <RTDTemperatureMeasurement+0x4c>
		return sqrt(TemperatureRTDfiltr / 10.0);
 8001866:	2200      	movs	r2, #0
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <RTDTemperatureMeasurement+0xc8>)
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe ffb1 	bl	80007d4 <__aeabi_ddiv>
 8001872:	ec41 0b10 	vmov	d0, r0, r1
 8001876:	f001 f8a5 	bl	80029c4 <sqrt>
 800187a:	e7cd      	b.n	8001818 <RTDTemperatureMeasurement+0x40>
		return 0;
 800187c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8001888 <RTDTemperatureMeasurement+0xb0>
 8001880:	e7ca      	b.n	8001818 <RTDTemperatureMeasurement+0x40>
 8001882:	bf00      	nop
 8001884:	f3af 8000 	nop.w
	...
 8001890:	487fcb92 	.word	0x487fcb92
 8001894:	3f6d7dbf 	.word	0x3f6d7dbf
 8001898:	40590000 	.word	0x40590000
 800189c:	3ff00000 	.word	0x3ff00000
 80018a0:	40240000 	.word	0x40240000
 80018a4:	d916872b 	.word	0xd916872b
 80018a8:	3f93f7ce 	.word	0x3f93f7ce
 80018ac:	66666666 	.word	0x66666666
 80018b0:	400a6666 	.word	0x400a6666
 80018b4:	00000000 	.word	0x00000000

080018b8 <ConvectorThemperatureVoltage>:
double ConvectorThemperatureVoltage()
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
	uint16_t ValueChannel2;
	double VoltageChannel2;
	int NumberOfReads = 10;
	int ValueAverage = 0;

	for(int AccountNumber=0; AccountNumber<NumberOfReads; AccountNumber++)
 80018ba:	2500      	movs	r5, #0
	int ValueAverage = 0;
 80018bc:	462e      	mov	r6, r5
	for(int AccountNumber=0; AccountNumber<NumberOfReads; AccountNumber++)
 80018be:	2d09      	cmp	r5, #9
 80018c0:	dc0e      	bgt.n	80018e0 <ConvectorThemperatureVoltage+0x28>
	{
		ADC1->SQR3 |= 0b00001<<ADC_SQR3_SQ2_Pos; //ВЫБОР КАНАЛА АЦП
 80018c2:	4c19      	ldr	r4, [pc, #100]	; (8001928 <ConvectorThemperatureVoltage+0x70>)
 80018c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	6363      	str	r3, [r4, #52]	; 0x34
		ADC1_Start(); //ЗАПУСК АЦП
 80018cc:	f7ff ff74 	bl	80017b8 <ADC1_Start>
		ValueChannel2 = ADC1_Read(); //ЧТЕНИЕ ДАННЫХ С АЦП
 80018d0:	f7ff ff66 	bl	80017a0 <ADC1_Read>
		ADC1->SQR3 = 0; //ОБНУЛЕНИЕ РЕГИСТРА ВЫБОРА КАНАЛА АЦП
 80018d4:	2300      	movs	r3, #0
 80018d6:	6363      	str	r3, [r4, #52]	; 0x34
		ValueAverage = ValueChannel2 * ValueChannel2 + ValueAverage; //СУММА ЗНАЧЕНИЙ ПРИНЯТЫХ АЦП
 80018d8:	fb00 6600 	mla	r6, r0, r0, r6
	for(int AccountNumber=0; AccountNumber<NumberOfReads; AccountNumber++)
 80018dc:	3501      	adds	r5, #1
 80018de:	e7ee      	b.n	80018be <ConvectorThemperatureVoltage+0x6>
	}
	ValueChannel2 = sqrt(ValueAverage/NumberOfReads); //СРЕДНЕЕ квадратичное ЗНАЧЕНИЕ ПОКАЗАНИЙ АЦП
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <ConvectorThemperatureVoltage+0x74>)
 80018e2:	fb80 3006 	smull	r3, r0, r0, r6
 80018e6:	17f6      	asrs	r6, r6, #31
 80018e8:	ebc6 00a0 	rsb	r0, r6, r0, asr #2
 80018ec:	f7fe fdde 	bl	80004ac <__aeabi_i2d>
 80018f0:	ec41 0b10 	vmov	d0, r0, r1
 80018f4:	f001 f866 	bl	80029c4 <sqrt>
 80018f8:	ec51 0b10 	vmov	r0, r1, d0
 80018fc:	f7ff f918 	bl	8000b30 <__aeabi_d2uiz>

	VoltageChannel2 = (double)3.3 * (double)ValueChannel2 / (double)4096.0; //ПЕРЕСЧЕТ напряжения на входе АЦП
 8001900:	b280      	uxth	r0, r0
 8001902:	f7fe fdc3 	bl	800048c <__aeabi_ui2d>
 8001906:	a306      	add	r3, pc, #24	; (adr r3, 8001920 <ConvectorThemperatureVoltage+0x68>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fe38 	bl	8000580 <__aeabi_dmul>
 8001910:	2200      	movs	r2, #0
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <ConvectorThemperatureVoltage+0x78>)
 8001914:	f7fe fe34 	bl	8000580 <__aeabi_dmul>

	return VoltageChannel2;
}
 8001918:	ec41 0b10 	vmov	d0, r0, r1
 800191c:	bd70      	pop	{r4, r5, r6, pc}
 800191e:	bf00      	nop
 8001920:	66666666 	.word	0x66666666
 8001924:	400a6666 	.word	0x400a6666
 8001928:	40012000 	.word	0x40012000
 800192c:	66666667 	.word	0x66666667
 8001930:	3f300000 	.word	0x3f300000
 8001934:	00000000 	.word	0x00000000

08001938 <ReadTemperatureFromThermocouple>:
#include <ThermocoupleTypeK.h>


double ReadTemperatureFromThermocouple(int NumberOfReads, double PolinomArrayLow[], double PolinomArrayHigh[], double GainThermocouple)
{
 8001938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800193c:	4605      	mov	r5, r0
 800193e:	460e      	mov	r6, r1
 8001940:	4692      	mov	sl, r2
 8001942:	ec59 8b10 	vmov	r8, r9, d0
	ValueAverage = 0;
 8001946:	2100      	movs	r1, #0
 8001948:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <ReadTemperatureFromThermocouple+0x228>)
 800194a:	8019      	strh	r1, [r3, #0]
	Value = 0;
 800194c:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <ReadTemperatureFromThermocouple+0x22c>)
 800194e:	8019      	strh	r1, [r3, #0]
	Temp = 0;
 8001950:	2200      	movs	r2, #0
 8001952:	2300      	movs	r3, #0
 8001954:	4884      	ldr	r0, [pc, #528]	; (8001b68 <ReadTemperatureFromThermocouple+0x230>)
 8001956:	e9c0 2300 	strd	r2, r3, [r0]
	Res = 0;
 800195a:	4884      	ldr	r0, [pc, #528]	; (8001b6c <ReadTemperatureFromThermocouple+0x234>)
 800195c:	e9c0 2300 	strd	r2, r3, [r0]
	temperature = 0;
 8001960:	4883      	ldr	r0, [pc, #524]	; (8001b70 <ReadTemperatureFromThermocouple+0x238>)
 8001962:	8001      	strh	r1, [r0, #0]
	ThermocoupleTemperature = 0;
 8001964:	4983      	ldr	r1, [pc, #524]	; (8001b74 <ReadTemperatureFromThermocouple+0x23c>)
 8001966:	e9c1 2300 	strd	r2, r3, [r1]


	//ПРОВЕРКА ВВЕДЕННОГО КОЭФФИЦИЕНТА
	if(GainThermocouple!=0)
 800196a:	ee10 0a10 	vmov	r0, s0
 800196e:	4649      	mov	r1, r9
 8001970:	f7ff f86e 	bl	8000a50 <__aeabi_dcmpeq>
 8001974:	2800      	cmp	r0, #0
 8001976:	d134      	bne.n	80019e2 <ReadTemperatureFromThermocouple+0xaa>
	{
		kt = GainThermocouple;
 8001978:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <ReadTemperatureFromThermocouple+0x240>)
 800197a:	e9c3 8900 	strd	r8, r9, [r3]
	else
	{
		kt = 0.75; //коэффициент термопары 0.75
	}

	StatusDs18b20 = ds18b20_Init(SKIP_ROM);//ИНИЦИАЛИЗАЦИЯ ДАТЧИКА ds18b20
 800197e:	2000      	movs	r0, #0
 8001980:	f000 fa18 	bl	8001db4 <ds18b20_Init>
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <ReadTemperatureFromThermocouple+0x244>)
 8001986:	7018      	strb	r0, [r3, #0]
	ds18b20_ReadStratcpad(SKIP_ROM, dt, 0); //ЧТЕНИЕ ПОКАЗАНИЙ ДАТЧИКА ds18b20
 8001988:	4c7d      	ldr	r4, [pc, #500]	; (8001b80 <ReadTemperatureFromThermocouple+0x248>)
 800198a:	2200      	movs	r2, #0
 800198c:	4621      	mov	r1, r4
 800198e:	4610      	mov	r0, r2
 8001990:	f000 fa2a 	bl	8001de8 <ds18b20_ReadStratcpad>
	frt = ((uint16_t)dt[1]<<8)|dt[0]; //ЗАПИСИТЬ В 16-БИТНОМ ЗНАЧЕНИИ ДАННЫХ РЕГИСТРОВ ТЕМПЕРАТУРЫ ДАТЧИКА ds18b20
 8001994:	7863      	ldrb	r3, [r4, #1]
 8001996:	7820      	ldrb	r0, [r4, #0]
 8001998:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <ReadTemperatureFromThermocouple+0x24c>)
 800199e:	8018      	strh	r0, [r3, #0]
	temperature = ds18b20_Convert(frt); //ПЕРЕСЧЕТ ТЕМПЕРАТУРЫ, КОТРУЮ СЧИТАЕТ ДАТЧИК ds18b20
 80019a0:	f000 fa44 	bl	8001e2c <ds18b20_Convert>
 80019a4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80019a8:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <ReadTemperatureFromThermocouple+0x238>)
 80019aa:	ee10 2a10 	vmov	r2, s0
 80019ae:	801a      	strh	r2, [r3, #0]

	//Суммируем NumberOfReads-количество считываний АЦП для нахождения среднего
	for(int AccountNumber=0; AccountNumber<NumberOfReads; AccountNumber++)
 80019b0:	2400      	movs	r4, #0
 80019b2:	42ac      	cmp	r4, r5
 80019b4:	da1b      	bge.n	80019ee <ReadTemperatureFromThermocouple+0xb6>
	{
		ADC1->SQR3 |= 0b00001<<ADC_SQR3_SQ1_Pos; //ВЫБОР КАНАЛА АЦП
 80019b6:	4f74      	ldr	r7, [pc, #464]	; (8001b88 <ReadTemperatureFromThermocouple+0x250>)
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
		ADC1_Start(); //ЗАПУСК АЦП
 80019c0:	f7ff fefa 	bl	80017b8 <ADC1_Start>
		Value = ADC1_Read(); //ЧТЕНИЕ ДАННЫХ С АЦП
 80019c4:	f7ff feec 	bl	80017a0 <ADC1_Read>
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <ReadTemperatureFromThermocouple+0x22c>)
 80019ca:	8018      	strh	r0, [r3, #0]
		ADC1->SQR3 = 0; //ОБНУЛЕНИЕ РЕГИСТРА ВЫБОРА КАНАЛА АЦП
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
		ValueAverage = Value * Value + ValueAverage; //СУММА ЗНАЧЕНИЙ ПРИНЯТЫХ АЦП
 80019d0:	fb10 f000 	smulbb	r0, r0, r0
 80019d4:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <ReadTemperatureFromThermocouple+0x228>)
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	fa12 f080 	uxtah	r0, r2, r0
 80019dc:	8018      	strh	r0, [r3, #0]
	for(int AccountNumber=0; AccountNumber<NumberOfReads; AccountNumber++)
 80019de:	3401      	adds	r4, #1
 80019e0:	e7e7      	b.n	80019b2 <ReadTemperatureFromThermocouple+0x7a>
		kt = 0.75; //коэффициент термопары 0.75
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <ReadTemperatureFromThermocouple+0x240>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	4969      	ldr	r1, [pc, #420]	; (8001b8c <ReadTemperatureFromThermocouple+0x254>)
 80019e8:	e9c3 0100 	strd	r0, r1, [r3]
 80019ec:	e7c7      	b.n	800197e <ReadTemperatureFromThermocouple+0x46>

	}
	AverageVelue = sqrt(ValueAverage/NumberOfReads); //СРЕДНЕЕ квадратичное ЗНАЧЕНИЕ ПОКАЗАНИЙ АЦП
 80019ee:	4b5c      	ldr	r3, [pc, #368]	; (8001b60 <ReadTemperatureFromThermocouple+0x228>)
 80019f0:	8818      	ldrh	r0, [r3, #0]
 80019f2:	fb90 f0f5 	sdiv	r0, r0, r5
 80019f6:	f7fe fd59 	bl	80004ac <__aeabi_i2d>
 80019fa:	ec41 0b10 	vmov	d0, r0, r1
 80019fe:	f000 ffe1 	bl	80029c4 <sqrt>
 8001a02:	ec51 0b10 	vmov	r0, r1, d0
 8001a06:	f7ff f893 	bl	8000b30 <__aeabi_d2uiz>
 8001a0a:	b280      	uxth	r0, r0
 8001a0c:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <ReadTemperatureFromThermocouple+0x258>)
 8001a0e:	8018      	strh	r0, [r3, #0]
	ConversionToVoltage = (double) 3.3 / (double) 4096.0 * (double)AverageVelue;//Пересчет 12-битных значений АЦП в напряжение
 8001a10:	f7fe fd3c 	bl	800048c <__aeabi_ui2d>
 8001a14:	a34a      	add	r3, pc, #296	; (adr r3, 8001b40 <ReadTemperatureFromThermocouple+0x208>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fdb1 	bl	8000580 <__aeabi_dmul>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	460d      	mov	r5, r1
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <ReadTemperatureFromThermocouple+0x25c>)
 8001a24:	e9c3 4500 	strd	r4, r5, [r3]
	VoltageOnThermocouple = ConversionToVoltage / (double) 59.23;//ПЕРЕСЧЕТ ПРИНЯТОГО НАПРЯЖЕНИЕ В НАПРЯЖЕНИЕ ТЕРМОПАРЫ (КОЭФ-Т УСИЛЕНИЯ ОУ 59.23)
 8001a28:	a347      	add	r3, pc, #284	; (adr r3, 8001b48 <ReadTemperatureFromThermocouple+0x210>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fed1 	bl	80007d4 <__aeabi_ddiv>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <ReadTemperatureFromThermocouple+0x260>)
 8001a38:	e9c3 4500 	strd	r4, r5, [r3]

	/*НАХОЖДЕНИЕ ТЕМПЕРАТУРЫ ТЕРМОПАРЫ ТИПА К МЕТОДОМ АПРОКСИМАЦИИ*/

	if((VoltageOnThermocouple*1000.0>0.0) && (VoltageOnThermocouple*1000.0<20.644)) //ДЛЯ ДИАПАЗОНА ТЕМПЕРАТУР 0--500 *С
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <ReadTemperatureFromThermocouple+0x264>)
 8001a40:	f7fe fd9e 	bl	8000580 <__aeabi_dmul>
 8001a44:	4680      	mov	r8, r0
 8001a46:	4689      	mov	r9, r1
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f7ff f828 	bl	8000aa0 <__aeabi_dcmpgt>
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d040      	beq.n	8001ad6 <ReadTemperatureFromThermocouple+0x19e>
 8001a54:	a33e      	add	r3, pc, #248	; (adr r3, 8001b50 <ReadTemperatureFromThermocouple+0x218>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	4640      	mov	r0, r8
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	f7ff f801 	bl	8000a64 <__aeabi_dcmplt>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d037      	beq.n	8001ad6 <ReadTemperatureFromThermocouple+0x19e>
	{
		Res = PolinomArrayLow[9];
 8001a66:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <ReadTemperatureFromThermocouple+0x234>)
 8001a6c:	e9c3 0100 	strd	r0, r1, [r3]
		for(int iTemp=1; iTemp<10; iTemp++)//9 -- ЧИСЛО КОЭЭФИЦИЕНТОВ АПРОКСИМАЦИИ
 8001a70:	2701      	movs	r7, #1
 8001a72:	e019      	b.n	8001aa8 <ReadTemperatureFromThermocouple+0x170>
		{
			//РЕШЕНИЕ МНОЖЕСТВА АПРОКСИМАЦИИ МЕТОДОМ ГОРНЕРА
            Temp = (double)Res * (double)VoltageOnThermocouple * 1000 + (double)PolinomArrayLow[9-iTemp];
 8001a74:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001b6c <ReadTemperatureFromThermocouple+0x234>
 8001a78:	e9d8 2300 	ldrd	r2, r3, [r8]
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f7fe fd7e 	bl	8000580 <__aeabi_dmul>
 8001a84:	2200      	movs	r2, #0
 8001a86:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <ReadTemperatureFromThermocouple+0x264>)
 8001a88:	f7fe fd7a 	bl	8000580 <__aeabi_dmul>
 8001a8c:	f1c7 0309 	rsb	r3, r7, #9
 8001a90:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fbbc 	bl	8000214 <__adddf3>
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <ReadTemperatureFromThermocouple+0x230>)
 8001a9e:	e9c3 0100 	strd	r0, r1, [r3]
            Res = (double)Temp;
 8001aa2:	e9c8 0100 	strd	r0, r1, [r8]
		for(int iTemp=1; iTemp<10; iTemp++)//9 -- ЧИСЛО КОЭЭФИЦИЕНТОВ АПРОКСИМАЦИИ
 8001aa6:	3701      	adds	r7, #1
 8001aa8:	2f09      	cmp	r7, #9
 8001aaa:	dde3      	ble.n	8001a74 <ReadTemperatureFromThermocouple+0x13c>
	}


//		ThermocoupleTemperature = (Temp + temperature) * kt;//ТЕМПЕРАТУРА НА ГОРЯЧЕМ СПАЕ ТЕРМОПАРЫ. КОМПЕНСАЦИЯ ХОЛОДНОГО СПАЯ ДАТЧИКОМ ds18b20

		ThermocoupleTemperature = Temp + kt * (temperature - 0.0);
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <ReadTemperatureFromThermocouple+0x238>)
 8001aae:	8818      	ldrh	r0, [r3, #0]
 8001ab0:	f7fe fcfc 	bl	80004ac <__aeabi_i2d>
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <ReadTemperatureFromThermocouple+0x240>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fd61 	bl	8000580 <__aeabi_dmul>
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <ReadTemperatureFromThermocouple+0x230>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fba6 	bl	8000214 <__adddf3>
 8001ac8:	ec41 0b10 	vmov	d0, r0, r1
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <ReadTemperatureFromThermocouple+0x23c>)
 8001ace:	e9c3 0100 	strd	r0, r1, [r3]

	return ThermocoupleTemperature;
}
 8001ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if((VoltageOnThermocouple*1000.0 >= 20.644)&&(VoltageOnThermocouple*1000.0 < 54.886)) //ДЛЯ ДИАПАЗОНА ТЕМПЕРАТУР 500--1372 *С
 8001ad6:	a31e      	add	r3, pc, #120	; (adr r3, 8001b50 <ReadTemperatureFromThermocouple+0x218>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	4640      	mov	r0, r8
 8001ade:	4649      	mov	r1, r9
 8001ae0:	f7fe ffd4 	bl	8000a8c <__aeabi_dcmpge>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d0e1      	beq.n	8001aac <ReadTemperatureFromThermocouple+0x174>
 8001ae8:	a31b      	add	r3, pc, #108	; (adr r3, 8001b58 <ReadTemperatureFromThermocouple+0x220>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	4640      	mov	r0, r8
 8001af0:	4649      	mov	r1, r9
 8001af2:	f7fe ffb7 	bl	8000a64 <__aeabi_dcmplt>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d0d8      	beq.n	8001aac <ReadTemperatureFromThermocouple+0x174>
		Res = PolinomArrayHigh[9];
 8001afa:	e9da 0112 	ldrd	r0, r1, [sl, #72]	; 0x48
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <ReadTemperatureFromThermocouple+0x234>)
 8001b00:	e9c3 0100 	strd	r0, r1, [r3]
		for(int iTemp=1; iTemp<7; iTemp++)//7 -- ЧИСЛО КОЭЭФИЦИЕНТОВ АПРОКСИМАЦИИ
 8001b04:	2601      	movs	r6, #1
 8001b06:	2e06      	cmp	r6, #6
 8001b08:	dcd0      	bgt.n	8001aac <ReadTemperatureFromThermocouple+0x174>
            Temp = (double)Res * (double)VoltageOnThermocouple * 1000 + (double)PolinomArrayHigh[6-iTemp];
 8001b0a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8001b6c <ReadTemperatureFromThermocouple+0x234>
 8001b0e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8001b12:	4620      	mov	r0, r4
 8001b14:	4629      	mov	r1, r5
 8001b16:	f7fe fd33 	bl	8000580 <__aeabi_dmul>
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <ReadTemperatureFromThermocouple+0x264>)
 8001b1e:	f7fe fd2f 	bl	8000580 <__aeabi_dmul>
 8001b22:	f1c6 0306 	rsb	r3, r6, #6
 8001b26:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fb71 	bl	8000214 <__adddf3>
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <ReadTemperatureFromThermocouple+0x230>)
 8001b34:	e9c3 0100 	strd	r0, r1, [r3]
            Res = (double)Temp;
 8001b38:	e9c8 0100 	strd	r0, r1, [r8]
		for(int iTemp=1; iTemp<7; iTemp++)//7 -- ЧИСЛО КОЭЭФИЦИЕНТОВ АПРОКСИМАЦИИ
 8001b3c:	3601      	adds	r6, #1
 8001b3e:	e7e2      	b.n	8001b06 <ReadTemperatureFromThermocouple+0x1ce>
 8001b40:	66666666 	.word	0x66666666
 8001b44:	3f4a6666 	.word	0x3f4a6666
 8001b48:	a3d70a3d 	.word	0xa3d70a3d
 8001b4c:	404d9d70 	.word	0x404d9d70
 8001b50:	2f1a9fbe 	.word	0x2f1a9fbe
 8001b54:	4034a4dd 	.word	0x4034a4dd
 8001b58:	72b020c5 	.word	0x72b020c5
 8001b5c:	404b7168 	.word	0x404b7168
 8001b60:	200000b2 	.word	0x200000b2
 8001b64:	200000a0 	.word	0x200000a0
 8001b68:	200000b8 	.word	0x200000b8
 8001b6c:	200000d8 	.word	0x200000d8
 8001b70:	200000c0 	.word	0x200000c0
 8001b74:	200000e8 	.word	0x200000e8
 8001b78:	200000c8 	.word	0x200000c8
 8001b7c:	200000b0 	.word	0x200000b0
 8001b80:	200000f0 	.word	0x200000f0
 8001b84:	200000fa 	.word	0x200000fa
 8001b88:	40012000 	.word	0x40012000
 8001b8c:	3fe80000 	.word	0x3fe80000
 8001b90:	200000d0 	.word	0x200000d0
 8001b94:	200000a8 	.word	0x200000a8
 8001b98:	20000100 	.word	0x20000100
 8001b9c:	408f4000 	.word	0x408f4000

08001ba0 <Init_Timer2>:



void Init_Timer2(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;//ВКЛЮЧЕНИЕ ТАКТИРОВАНИЯ TIM2
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <Init_Timer2+0x3c>)
 8001ba2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40


	TIM2->CR1 &= ~TIM_CR1_DIR; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ
 8001baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f022 0210 	bic.w	r2, r2, #16
 8001bb4:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= 0b00<<TIM_CR1_CMS_Pos; //ВЫРАВНИВАНИЕ ПО КРАЯМ
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= 0b00<<TIM_CR1_CKD_Pos;
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <Init_Timer2+0x40>)
 8001bc0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8001bc4:	6011      	str	r1, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn); //ВКЛЮЧАЕМ ГЛОБАЛЬНЫЕ ПРЕРЫВАНИЯ ДЛЯ TIM2;

	TIM2->PSC = 45000; //ПЕРИОД ТАКТИРОВАНИЯ МИЛИСЕКУНДЫ
 8001bc6:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 2; //СЧЕТЧИК ДО Xx, ПОЛУЧАЕТСЯ ПЕРИОД СЧЕТА ТАЙМЕРА Xx МИЛИСЕКУНД
 8001bcc:	2202      	movs	r2, #2
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= TIM_DIER_UIE; //ВКЛЮЧЕНИЕ ПРЕРЫВАНИЙ ОТ TIM2;
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]

}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <Init_Timer3>:

void Init_Timer3(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;//ВКЛЮЧЕНИЕ ТАКТИРОВАНИЯ TIM2
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <Init_Timer3+0x3c>)
 8001be6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40


	TIM3->CR1 &= ~TIM_CR1_DIR; //СЧЕТЧИК ИСПОЛЬЗУЕТСЯ КАК ПОВЫШАЮЩИЙ
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <Init_Timer3+0x40>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= 0b00<<TIM_CR1_CMS_Pos; //ВЫРАВНИВАНИЕ ПО КРАЯМ
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= 0b00<<TIM_CR1_CKD_Pos;
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <Init_Timer3+0x44>)
 8001c02:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8001c06:	6011      	str	r1, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn); //ВКЛЮЧАЕМ ГЛОБАЛЬНЫЕ ПРЕРЫВАНИЯ ДЛЯ TIM2;

	TIM3->PSC = 45000; //ПЕРИОД ТАКТИРОВАНИЯ МИЛИСЕКУНДЫ
 8001c08:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 5000; //СЧЕТЧИК ДО Xx, ПОЛУЧАЕТСЯ ПЕРИОД СЧЕТА ТАЙМЕРА Xx МИЛИСЕКУНД
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= TIM_DIER_UIE; //ВКЛЮЧЕНИЕ ПРЕРЫВАНИЙ ОТ TIM2;
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	60da      	str	r2, [r3, #12]

}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40000400 	.word	0x40000400
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <ds18b20_Reset>:
}
//--------------------------------------------------
uint8_t ds18b20_Reset(void)
{
  uint16_t status;
  GPIOA->ODR &= ~GPIO_ODR_OD5;//низкий уровень
 8001c2c:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <ds18b20_Reset+0x60>)
 8001c2e:	6953      	ldr	r3, [r2, #20]
 8001c30:	f023 0320 	bic.w	r3, r3, #32
 8001c34:	6153      	str	r3, [r2, #20]
  DelayMicro(485);//задержка как минимум на 480 микросекунд
 8001c36:	f240 13e5 	movw	r3, #485	; 0x1e5
micros *= (SystemCoreClock / 1000000) / 9;
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <ds18b20_Reset+0x64>)
 8001c3c:	6811      	ldr	r1, [r2, #0]
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <ds18b20_Reset+0x68>)
 8001c40:	fba2 2101 	umull	r2, r1, r2, r1
 8001c44:	0dc9      	lsrs	r1, r1, #23
 8001c46:	fb03 f301 	mul.w	r3, r3, r1
while (micros--) ;
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d1fb      	bne.n	8001c4a <ds18b20_Reset+0x1e>
  GPIOA->ODR |= GPIO_ODR_OD5;//высокий уровень
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <ds18b20_Reset+0x60>)
 8001c54:	6953      	ldr	r3, [r2, #20]
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6153      	str	r3, [r2, #20]
  DelayMicro(50);//задержка как минимум на 50 микросекунд
 8001c5c:	2332      	movs	r3, #50	; 0x32
micros *= (SystemCoreClock / 1000000) / 9;
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
while (micros--) ;
 8001c62:	461a      	mov	r2, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d1fb      	bne.n	8001c62 <ds18b20_Reset+0x36>
  status = GPIOA->IDR & GPIO_IDR_ID5;//проверяем уровень
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <ds18b20_Reset+0x60>)
 8001c6c:	6918      	ldr	r0, [r3, #16]
 8001c6e:	f000 0020 	and.w	r0, r0, #32
  DelayMicro(500);//задержка как минимум на 480 микросекунд
 8001c72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
micros *= (SystemCoreClock / 1000000) / 9;
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
while (micros--) ;
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d1fb      	bne.n	8001c7a <ds18b20_Reset+0x4e>
  //(на всякий случай подождём побольше, так как могут быть неточности в задержке)
  return (status ? 1 : 0);//вернём результат
}
 8001c82:	3800      	subs	r0, #0
 8001c84:	bf18      	it	ne
 8001c86:	2001      	movne	r0, #1
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	ee9bfab5 	.word	0xee9bfab5

08001c98 <ds18b20_ReadBit>:
//----------------------------------------------------------
uint8_t ds18b20_ReadBit(void)
{
  uint8_t bit = 0;
  GPIOA->ODR &= ~GPIO_ODR_OD5;//низкий уровень
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <ds18b20_ReadBit+0x50>)
 8001c9a:	6953      	ldr	r3, [r2, #20]
 8001c9c:	f023 0320 	bic.w	r3, r3, #32
 8001ca0:	6153      	str	r3, [r2, #20]
micros *= (SystemCoreClock / 1000000) / 9;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <ds18b20_ReadBit+0x54>)
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <ds18b20_ReadBit+0x58>)
 8001ca8:	fba3 3101 	umull	r3, r1, r3, r1
 8001cac:	0dc9      	lsrs	r1, r1, #23
 8001cae:	004b      	lsls	r3, r1, #1
while (micros--) ;
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d1fb      	bne.n	8001cb0 <ds18b20_ReadBit+0x18>
  DelayMicro(2);
  GPIOA->ODR |= GPIO_ODR_OD5;//высокий уровень
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <ds18b20_ReadBit+0x50>)
 8001cba:	6953      	ldr	r3, [r2, #20]
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6153      	str	r3, [r2, #20]
  DelayMicro(13);
 8001cc2:	230d      	movs	r3, #13
micros *= (SystemCoreClock / 1000000) / 9;
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
while (micros--) ;
 8001cc8:	461a      	mov	r2, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	d1fb      	bne.n	8001cc8 <ds18b20_ReadBit+0x30>
  bit = (GPIOA->IDR & GPIO_IDR_ID5 ? 1 : 0);//проверяем уровень
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <ds18b20_ReadBit+0x50>)
 8001cd2:	6918      	ldr	r0, [r3, #16]
 8001cd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
  DelayMicro(45);
 8001cd8:	232d      	movs	r3, #45	; 0x2d
micros *= (SystemCoreClock / 1000000) / 9;
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
while (micros--) ;
 8001cde:	461a      	mov	r2, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d1fb      	bne.n	8001cde <ds18b20_ReadBit+0x46>
  return bit;
}
 8001ce6:	4770      	bx	lr
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	ee9bfab5 	.word	0xee9bfab5

08001cf4 <ds18b20_ReadByte>:
//-----------------------------------------------
uint8_t ds18b20_ReadByte(void)
{
 8001cf4:	b538      	push	{r3, r4, r5, lr}
  uint8_t data = 0;
  for (uint8_t i = 0; i <= 7; i++)
 8001cf6:	2400      	movs	r4, #0
  uint8_t data = 0;
 8001cf8:	4625      	mov	r5, r4
  for (uint8_t i = 0; i <= 7; i++)
 8001cfa:	e006      	b.n	8001d0a <ds18b20_ReadByte+0x16>
  data += ds18b20_ReadBit() << i;
 8001cfc:	f7ff ffcc 	bl	8001c98 <ds18b20_ReadBit>
 8001d00:	40a0      	lsls	r0, r4
 8001d02:	4405      	add	r5, r0
 8001d04:	b2ed      	uxtb	r5, r5
  for (uint8_t i = 0; i <= 7; i++)
 8001d06:	3401      	adds	r4, #1
 8001d08:	b2e4      	uxtb	r4, r4
 8001d0a:	2c07      	cmp	r4, #7
 8001d0c:	d9f6      	bls.n	8001cfc <ds18b20_ReadByte+0x8>
  return data;
}
 8001d0e:	4628      	mov	r0, r5
 8001d10:	bd38      	pop	{r3, r4, r5, pc}
	...

08001d14 <ds18b20_WriteBit>:
//-----------------------------------------------
void ds18b20_WriteBit(uint8_t bit)
{
 8001d14:	b410      	push	{r4}
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <ds18b20_WriteBit+0x54>)
 8001d18:	6953      	ldr	r3, [r2, #20]
 8001d1a:	f023 0320 	bic.w	r3, r3, #32
 8001d1e:	6153      	str	r3, [r2, #20]
	DelayMicro(bit ? 3 : 65);
 8001d20:	4604      	mov	r4, r0
 8001d22:	b1e0      	cbz	r0, 8001d5e <ds18b20_WriteBit+0x4a>
 8001d24:	2203      	movs	r2, #3
micros *= (SystemCoreClock / 1000000) / 9;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <ds18b20_WriteBit+0x58>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <ds18b20_WriteBit+0x5c>)
 8001d2c:	fba0 1303 	umull	r1, r3, r0, r3
 8001d30:	0dd8      	lsrs	r0, r3, #23
 8001d32:	fb02 f200 	mul.w	r2, r2, r0
while (micros--) ;
 8001d36:	4611      	mov	r1, r2
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	d1fb      	bne.n	8001d36 <ds18b20_WriteBit+0x22>
	GPIOA->ODR |= GPIO_ODR_OD5;
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <ds18b20_WriteBit+0x54>)
 8001d40:	6953      	ldr	r3, [r2, #20]
 8001d42:	f043 0320 	orr.w	r3, r3, #32
 8001d46:	6153      	str	r3, [r2, #20]
	DelayMicro(bit ? 65 : 3);
 8001d48:	b15c      	cbz	r4, 8001d62 <ds18b20_WriteBit+0x4e>
 8001d4a:	2341      	movs	r3, #65	; 0x41
micros *= (SystemCoreClock / 1000000) / 9;
 8001d4c:	fb03 f300 	mul.w	r3, r3, r0
while (micros--) ;
 8001d50:	461a      	mov	r2, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d1fb      	bne.n	8001d50 <ds18b20_WriteBit+0x3c>
}
 8001d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d5c:	4770      	bx	lr
	DelayMicro(bit ? 3 : 65);
 8001d5e:	2241      	movs	r2, #65	; 0x41
 8001d60:	e7e1      	b.n	8001d26 <ds18b20_WriteBit+0x12>
	DelayMicro(bit ? 65 : 3);
 8001d62:	2303      	movs	r3, #3
 8001d64:	e7f2      	b.n	8001d4c <ds18b20_WriteBit+0x38>
 8001d66:	bf00      	nop
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	ee9bfab5 	.word	0xee9bfab5

08001d74 <ds18b20_WriteByte>:
//-----------------------------------------------
void ds18b20_WriteByte(uint8_t dt)
{
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4605      	mov	r5, r0
  for (uint8_t i = 0; i < 8; i++)
 8001d78:	2400      	movs	r4, #0
 8001d7a:	e014      	b.n	8001da6 <ds18b20_WriteByte+0x32>
  {
    ds18b20_WriteBit(dt >> i & 1);
 8001d7c:	fa45 f004 	asr.w	r0, r5, r4
 8001d80:	f000 0001 	and.w	r0, r0, #1
 8001d84:	f7ff ffc6 	bl	8001d14 <ds18b20_WriteBit>
    //Delay Protection
    DelayMicro(5);
 8001d88:	2305      	movs	r3, #5
micros *= (SystemCoreClock / 1000000) / 9;
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <ds18b20_WriteByte+0x38>)
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <ds18b20_WriteByte+0x3c>)
 8001d90:	fba1 1202 	umull	r1, r2, r1, r2
 8001d94:	0dd2      	lsrs	r2, r2, #23
 8001d96:	fb03 f302 	mul.w	r3, r3, r2
while (micros--) ;
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d1fb      	bne.n	8001d9a <ds18b20_WriteByte+0x26>
  for (uint8_t i = 0; i < 8; i++)
 8001da2:	3401      	adds	r4, #1
 8001da4:	b2e4      	uxtb	r4, r4
 8001da6:	2c07      	cmp	r4, #7
 8001da8:	d9e8      	bls.n	8001d7c <ds18b20_WriteByte+0x8>
  }
}
 8001daa:	bd38      	pop	{r3, r4, r5, pc}
 8001dac:	20000008 	.word	0x20000008
 8001db0:	ee9bfab5 	.word	0xee9bfab5

08001db4 <ds18b20_Init>:
//-----------------------------------------------
uint8_t ds18b20_Init(uint8_t mode)
{
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4604      	mov	r4, r0
	if(ds18b20_Reset()) return 1;
 8001db8:	f7ff ff38 	bl	8001c2c <ds18b20_Reset>
 8001dbc:	b990      	cbnz	r0, 8001de4 <ds18b20_Init+0x30>
  if(mode==SKIP_ROM)
 8001dbe:	b104      	cbz	r4, 8001dc2 <ds18b20_Init+0xe>
		ds18b20_WriteByte(0xA);
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
  }
  return 0;
}
 8001dc0:	bd10      	pop	{r4, pc}
		ds18b20_WriteByte(0xCC);
 8001dc2:	20cc      	movs	r0, #204	; 0xcc
 8001dc4:	f7ff ffd6 	bl	8001d74 <ds18b20_WriteByte>
		ds18b20_WriteByte(0x4E);
 8001dc8:	204e      	movs	r0, #78	; 0x4e
 8001dca:	f7ff ffd3 	bl	8001d74 <ds18b20_WriteByte>
		ds18b20_WriteByte(0x64);
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	f7ff ffd0 	bl	8001d74 <ds18b20_WriteByte>
		ds18b20_WriteByte(0xA);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f7ff ffcd 	bl	8001d74 <ds18b20_WriteByte>
		ds18b20_WriteByte(RESOLUTION_12BIT);
 8001dda:	207f      	movs	r0, #127	; 0x7f
 8001ddc:	f7ff ffca 	bl	8001d74 <ds18b20_WriteByte>
  return 0;
 8001de0:	4620      	mov	r0, r4
 8001de2:	e7ed      	b.n	8001dc0 <ds18b20_Init+0xc>
	if(ds18b20_Reset()) return 1;
 8001de4:	2001      	movs	r0, #1
 8001de6:	e7eb      	b.n	8001dc0 <ds18b20_Init+0xc>

08001de8 <ds18b20_ReadStratcpad>:
  //CONVERT T
  ds18b20_WriteByte(0x44);
}
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
  uint8_t i;
  ds18b20_Reset();
 8001dee:	f7ff ff1d 	bl	8001c2c <ds18b20_Reset>
  if(mode==SKIP_ROM)
 8001df2:	b154      	cbz	r4, 8001e0a <ds18b20_ReadStratcpad+0x22>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
  }
  //CONVERT T
  ds18b20_WriteByte(0x44);
 8001df4:	2044      	movs	r0, #68	; 0x44
 8001df6:	f7ff ffbd 	bl	8001d74 <ds18b20_WriteByte>
  ds18b20_Reset();
 8001dfa:	f7ff ff17 	bl	8001c2c <ds18b20_Reset>
  if(mode==SKIP_ROM)
 8001dfe:	b144      	cbz	r4, 8001e12 <ds18b20_ReadStratcpad+0x2a>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
  }
  //READ SCRATCHPAD
  ds18b20_WriteByte(0xBE);
 8001e00:	20be      	movs	r0, #190	; 0xbe
 8001e02:	f7ff ffb7 	bl	8001d74 <ds18b20_WriteByte>
  for(i=0;i<8;i++)
 8001e06:	2400      	movs	r4, #0
 8001e08:	e00c      	b.n	8001e24 <ds18b20_ReadStratcpad+0x3c>
    ds18b20_WriteByte(0xCC);
 8001e0a:	20cc      	movs	r0, #204	; 0xcc
 8001e0c:	f7ff ffb2 	bl	8001d74 <ds18b20_WriteByte>
 8001e10:	e7f0      	b.n	8001df4 <ds18b20_ReadStratcpad+0xc>
    ds18b20_WriteByte(0xCC);
 8001e12:	20cc      	movs	r0, #204	; 0xcc
 8001e14:	f7ff ffae 	bl	8001d74 <ds18b20_WriteByte>
 8001e18:	e7f2      	b.n	8001e00 <ds18b20_ReadStratcpad+0x18>
  {
    Data[i] = ds18b20_ReadByte();
 8001e1a:	f7ff ff6b 	bl	8001cf4 <ds18b20_ReadByte>
 8001e1e:	5528      	strb	r0, [r5, r4]
  for(i=0;i<8;i++)
 8001e20:	3401      	adds	r4, #1
 8001e22:	b2e4      	uxtb	r4, r4
 8001e24:	2c07      	cmp	r4, #7
 8001e26:	d9f8      	bls.n	8001e1a <ds18b20_ReadStratcpad+0x32>
  }
}
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e2c <ds18b20_Convert>:
}
//----------------------------------------------------------
float ds18b20_Convert(uint16_t dt)
{
  float t;
  t = (float) ((dt&0x07FF)>>4); //отборосим знаковые и дробные биты
 8001e2c:	f3c0 1306 	ubfx	r3, r0, #4, #7
 8001e30:	ee00 3a10 	vmov	s0, r3
 8001e34:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  //Прибавим дробную часть
  t += (float)(dt&0x000F) / 16.0f;
 8001e38:	f000 030f 	and.w	r3, r0, #15
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8001e54 <ds18b20_Convert+0x28>
 8001e48:	ee67 7a87 	vmul.f32	s15, s15, s14
  return t;
}
 8001e4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	3d800000 	.word	0x3d800000

08001e58 <MX_GPIO_Init>:
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

static void MX_GPIO_Init(void)
{
 8001e58:	b082      	sub	sp, #8

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	9100      	str	r1, [sp, #0]
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_GPIO_Init+0x34>)
 8001e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e62:	f042 0204 	orr.w	r2, r2, #4
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
 8001e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6a:	f002 0204 	and.w	r2, r2, #4
 8001e6e:	9200      	str	r2, [sp, #0]
 8001e70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e72:	9101      	str	r1, [sp, #4]
 8001e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	9b01      	ldr	r3, [sp, #4]

}
 8001e86:	b002      	add	sp, #8
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <TIM3_IRQHandler>:
{
 8001e90:	b508      	push	{r3, lr}
	if(TIM3->SR & TIM_SR_UIF)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <TIM3_IRQHandler+0x58>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f013 0f01 	tst.w	r3, #1
 8001e9a:	d004      	beq.n	8001ea6 <TIM3_IRQHandler+0x16>
		TIM3->SR &= ~TIM_SR_UIF;
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <TIM3_IRQHandler+0x58>)
 8001e9e:	6913      	ldr	r3, [r2, #16]
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6113      	str	r3, [r2, #16]
	if(a==0)
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <TIM3_IRQHandler+0x5c>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b96b      	cbnz	r3, 8001ec8 <TIM3_IRQHandler+0x38>
		TempOfDisplay = ReadTemperatureFromThermocouple(100, PolinomArray500, PolinomArray1372, 0.77); //Если в последний аргумент написать 0, то коэффициент термопары установится по умолчанию
 8001eac:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001ee0 <TIM3_IRQHandler+0x50>
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <TIM3_IRQHandler+0x60>)
 8001eb2:	4910      	ldr	r1, [pc, #64]	; (8001ef4 <TIM3_IRQHandler+0x64>)
 8001eb4:	2064      	movs	r0, #100	; 0x64
 8001eb6:	f7ff fd3f 	bl	8001938 <ReadTemperatureFromThermocouple>
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <TIM3_IRQHandler+0x68>)
 8001ebc:	ed83 0b00 	vstr	d0, [r3]
		a=1;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <TIM3_IRQHandler+0x5c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	801a      	strh	r2, [r3, #0]
}
 8001ec6:	bd08      	pop	{r3, pc}
		TempOfDisplay = RTDTemperatureMeasurement(ConvectorThemperatureVoltage()); //АРГУМЕНТОМ ФУНКЦИИ ЯВЛЯЕТСЯ ПОКАЗАНИЯ АЦП В ВОЛЬТАХ
 8001ec8:	f7ff fcf6 	bl	80018b8 <ConvectorThemperatureVoltage>
 8001ecc:	f7ff fc84 	bl	80017d8 <RTDTemperatureMeasurement>
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <TIM3_IRQHandler+0x68>)
 8001ed2:	ed83 0b00 	vstr	d0, [r3]
		a=0;
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <TIM3_IRQHandler+0x5c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	801a      	strh	r2, [r3, #0]
}
 8001edc:	e7f3      	b.n	8001ec6 <TIM3_IRQHandler+0x36>
 8001ede:	bf00      	nop
 8001ee0:	0a3d70a4 	.word	0x0a3d70a4
 8001ee4:	3fe8a3d7 	.word	0x3fe8a3d7
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	200000f8 	.word	0x200000f8
 8001ef0:	200004e0 	.word	0x200004e0
 8001ef4:	20000470 	.word	0x20000470
 8001ef8:	200004d8 	.word	0x200004d8

08001efc <InitOfFigureLedDigitDisplay>:
		switch (figure)
 8001efc:	2809      	cmp	r0, #9
 8001efe:	f200 814c 	bhi.w	800219a <InitOfFigureLedDigitDisplay+0x29e>
 8001f02:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001f06:	000a      	.short	0x000a
 8001f08:	004a002a 	.word	0x004a002a
 8001f0c:	008b006b 	.word	0x008b006b
 8001f10:	00cb00ab 	.word	0x00cb00ab
 8001f14:	010b00eb 	.word	0x010b00eb
 8001f18:	012b      	.short	0x012b
			SET_A; SET_B; SET_C; SET_D; SET_E; SET_F; RESET_G;
 8001f1a:	4aa0      	ldr	r2, [pc, #640]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 8001f1c:	6993      	ldr	r3, [r2, #24]
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b9e      	ldr	r3, [pc, #632]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8001f26:	6999      	ldr	r1, [r3, #24]
 8001f28:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001f2c:	6199      	str	r1, [r3, #24]
 8001f2e:	489d      	ldr	r0, [pc, #628]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8001f30:	6981      	ldr	r1, [r0, #24]
 8001f32:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001f36:	6181      	str	r1, [r0, #24]
 8001f38:	6999      	ldr	r1, [r3, #24]
 8001f3a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001f3e:	6199      	str	r1, [r3, #24]
 8001f40:	6999      	ldr	r1, [r3, #24]
 8001f42:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001f46:	6199      	str	r1, [r3, #24]
 8001f48:	6991      	ldr	r1, [r2, #24]
 8001f4a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001f4e:	6191      	str	r1, [r2, #24]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001f56:	619a      	str	r2, [r3, #24]
			break;
 8001f58:	4770      	bx	lr
			SET_B; SET_C; RESET_D; RESET_E; RESET_F; RESET_G; RESET_A;
 8001f5a:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f62:	619a      	str	r2, [r3, #24]
 8001f64:	498f      	ldr	r1, [pc, #572]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8001f66:	698a      	ldr	r2, [r1, #24]
 8001f68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6c:	618a      	str	r2, [r1, #24]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f7c:	619a      	str	r2, [r3, #24]
 8001f7e:	4a87      	ldr	r2, [pc, #540]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 8001f80:	6991      	ldr	r1, [r2, #24]
 8001f82:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001f86:	6191      	str	r1, [r2, #24]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001f8e:	6199      	str	r1, [r3, #24]
 8001f90:	6993      	ldr	r3, [r2, #24]
 8001f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f96:	6193      	str	r3, [r2, #24]
			break;
 8001f98:	4770      	bx	lr
			SET_A; SET_B; SET_G; SET_E; SET_D; RESET_F; RESET_C;
 8001f9a:	4a80      	ldr	r2, [pc, #512]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 8001f9c:	6993      	ldr	r3, [r2, #24]
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b7e      	ldr	r3, [pc, #504]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8001fa6:	6999      	ldr	r1, [r3, #24]
 8001fa8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001fac:	6199      	str	r1, [r3, #24]
 8001fae:	6999      	ldr	r1, [r3, #24]
 8001fb0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001fb4:	6199      	str	r1, [r3, #24]
 8001fb6:	6999      	ldr	r1, [r3, #24]
 8001fb8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001fbc:	6199      	str	r1, [r3, #24]
 8001fbe:	6999      	ldr	r1, [r3, #24]
 8001fc0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001fc4:	6199      	str	r1, [r3, #24]
 8001fc6:	6993      	ldr	r3, [r2, #24]
 8001fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fcc:	6193      	str	r3, [r2, #24]
 8001fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd2:	6993      	ldr	r3, [r2, #24]
 8001fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd8:	6193      	str	r3, [r2, #24]
			break;
 8001fda:	4770      	bx	lr
			SET_A; SET_B; SET_C; SET_D; SET_G; RESET_E; RESET_F;
 8001fdc:	4a6f      	ldr	r2, [pc, #444]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 8001fde:	6993      	ldr	r3, [r2, #24]
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8001fe8:	6999      	ldr	r1, [r3, #24]
 8001fea:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001fee:	6199      	str	r1, [r3, #24]
 8001ff0:	486c      	ldr	r0, [pc, #432]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8001ff2:	6981      	ldr	r1, [r0, #24]
 8001ff4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001ff8:	6181      	str	r1, [r0, #24]
 8001ffa:	6999      	ldr	r1, [r3, #24]
 8001ffc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002000:	6199      	str	r1, [r3, #24]
 8002002:	6999      	ldr	r1, [r3, #24]
 8002004:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002008:	6199      	str	r1, [r3, #24]
 800200a:	6999      	ldr	r1, [r3, #24]
 800200c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002010:	6199      	str	r1, [r3, #24]
 8002012:	6993      	ldr	r3, [r2, #24]
 8002014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002018:	6193      	str	r3, [r2, #24]
			break;
 800201a:	4770      	bx	lr
			RESET_A; SET_B; SET_C; RESET_D; SET_G; RESET_E; SET_F;
 800201c:	4a5f      	ldr	r2, [pc, #380]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 800201e:	6993      	ldr	r3, [r2, #24]
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	6193      	str	r3, [r2, #24]
 8002026:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8002028:	6999      	ldr	r1, [r3, #24]
 800202a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800202e:	6199      	str	r1, [r3, #24]
 8002030:	485c      	ldr	r0, [pc, #368]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8002032:	6981      	ldr	r1, [r0, #24]
 8002034:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002038:	6181      	str	r1, [r0, #24]
 800203a:	6999      	ldr	r1, [r3, #24]
 800203c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002040:	6199      	str	r1, [r3, #24]
 8002042:	6999      	ldr	r1, [r3, #24]
 8002044:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002048:	6199      	str	r1, [r3, #24]
 800204a:	6999      	ldr	r1, [r3, #24]
 800204c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002050:	6199      	str	r1, [r3, #24]
 8002052:	6993      	ldr	r3, [r2, #24]
 8002054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002058:	6193      	str	r3, [r2, #24]
			break;
 800205a:	4770      	bx	lr
			SET_A; RESET_B; SET_C; SET_D; SET_G; RESET_E; SET_F;
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 800205e:	6993      	ldr	r3, [r2, #24]
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8002068:	6999      	ldr	r1, [r3, #24]
 800206a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800206e:	6199      	str	r1, [r3, #24]
 8002070:	484c      	ldr	r0, [pc, #304]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8002072:	6981      	ldr	r1, [r0, #24]
 8002074:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002078:	6181      	str	r1, [r0, #24]
 800207a:	6999      	ldr	r1, [r3, #24]
 800207c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002080:	6199      	str	r1, [r3, #24]
 8002082:	6999      	ldr	r1, [r3, #24]
 8002084:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002088:	6199      	str	r1, [r3, #24]
 800208a:	6999      	ldr	r1, [r3, #24]
 800208c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002090:	6199      	str	r1, [r3, #24]
 8002092:	6993      	ldr	r3, [r2, #24]
 8002094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002098:	6193      	str	r3, [r2, #24]
			break;
 800209a:	4770      	bx	lr
			SET_A; RESET_B; SET_C; SET_D; SET_G; SET_E; SET_F;
 800209c:	4a3f      	ldr	r2, [pc, #252]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 800209e:	6993      	ldr	r3, [r2, #24]
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6193      	str	r3, [r2, #24]
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 80020a8:	6999      	ldr	r1, [r3, #24]
 80020aa:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80020ae:	6199      	str	r1, [r3, #24]
 80020b0:	483c      	ldr	r0, [pc, #240]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 80020b2:	6981      	ldr	r1, [r0, #24]
 80020b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020b8:	6181      	str	r1, [r0, #24]
 80020ba:	6999      	ldr	r1, [r3, #24]
 80020bc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020c0:	6199      	str	r1, [r3, #24]
 80020c2:	6999      	ldr	r1, [r3, #24]
 80020c4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80020c8:	6199      	str	r1, [r3, #24]
 80020ca:	6999      	ldr	r1, [r3, #24]
 80020cc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80020d0:	6199      	str	r1, [r3, #24]
 80020d2:	6993      	ldr	r3, [r2, #24]
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	6193      	str	r3, [r2, #24]
			break;
 80020da:	4770      	bx	lr
			SET_A; SET_B; SET_C; RESET_D; RESET_G; RESET_E; RESET_F;
 80020dc:	4a2f      	ldr	r2, [pc, #188]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 80020de:	6993      	ldr	r3, [r2, #24]
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6193      	str	r3, [r2, #24]
 80020e6:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 80020e8:	6999      	ldr	r1, [r3, #24]
 80020ea:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80020ee:	6199      	str	r1, [r3, #24]
 80020f0:	482c      	ldr	r0, [pc, #176]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 80020f2:	6981      	ldr	r1, [r0, #24]
 80020f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020f8:	6181      	str	r1, [r0, #24]
 80020fa:	6999      	ldr	r1, [r3, #24]
 80020fc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002100:	6199      	str	r1, [r3, #24]
 8002102:	6999      	ldr	r1, [r3, #24]
 8002104:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002108:	6199      	str	r1, [r3, #24]
 800210a:	6999      	ldr	r1, [r3, #24]
 800210c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002110:	6199      	str	r1, [r3, #24]
 8002112:	6993      	ldr	r3, [r2, #24]
 8002114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002118:	6193      	str	r3, [r2, #24]
			break;
 800211a:	4770      	bx	lr
			SET_A; SET_B; SET_C; SET_D; SET_G; RESET_E; RESET_F;
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 800211e:	6993      	ldr	r3, [r2, #24]
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6193      	str	r3, [r2, #24]
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8002128:	6999      	ldr	r1, [r3, #24]
 800212a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800212e:	6199      	str	r1, [r3, #24]
 8002130:	481c      	ldr	r0, [pc, #112]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8002132:	6981      	ldr	r1, [r0, #24]
 8002134:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002138:	6181      	str	r1, [r0, #24]
 800213a:	6999      	ldr	r1, [r3, #24]
 800213c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002140:	6199      	str	r1, [r3, #24]
 8002142:	6999      	ldr	r1, [r3, #24]
 8002144:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002148:	6199      	str	r1, [r3, #24]
 800214a:	6999      	ldr	r1, [r3, #24]
 800214c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002150:	6199      	str	r1, [r3, #24]
 8002152:	6993      	ldr	r3, [r2, #24]
 8002154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002158:	6193      	str	r3, [r2, #24]
			break;
 800215a:	4770      	bx	lr
			SET_A; SET_B; SET_C; SET_D; SET_G; RESET_E; SET_F;
 800215c:	4a0f      	ldr	r2, [pc, #60]	; (800219c <InitOfFigureLedDigitDisplay+0x2a0>)
 800215e:	6993      	ldr	r3, [r2, #24]
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <InitOfFigureLedDigitDisplay+0x2a4>)
 8002168:	6999      	ldr	r1, [r3, #24]
 800216a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800216e:	6199      	str	r1, [r3, #24]
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <InitOfFigureLedDigitDisplay+0x2a8>)
 8002172:	6981      	ldr	r1, [r0, #24]
 8002174:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002178:	6181      	str	r1, [r0, #24]
 800217a:	6999      	ldr	r1, [r3, #24]
 800217c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002180:	6199      	str	r1, [r3, #24]
 8002182:	6999      	ldr	r1, [r3, #24]
 8002184:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002188:	6199      	str	r1, [r3, #24]
 800218a:	6999      	ldr	r1, [r3, #24]
 800218c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002190:	6199      	str	r1, [r3, #24]
 8002192:	6993      	ldr	r3, [r2, #24]
 8002194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002198:	6193      	str	r3, [r2, #24]
}
 800219a:	4770      	bx	lr
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020800 	.word	0x40020800

080021a8 <InitOfLedScopeBoard>:
{
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	460d      	mov	r5, r1
	InitOfFigureLedDigitDisplay(ArrayOfNumber[Zero]);
 80021ae:	4e68      	ldr	r6, [pc, #416]	; (8002350 <InitOfLedScopeBoard+0x1a8>)
 80021b0:	6833      	ldr	r3, [r6, #0]
 80021b2:	5cc0      	ldrb	r0, [r0, r3]
 80021b4:	f7ff fea2 	bl	8001efc <InitOfFigureLedDigitDisplay>
	switch (Zero)
 80021b8:	6833      	ldr	r3, [r6, #0]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d820      	bhi.n	8002200 <InitOfLedScopeBoard+0x58>
 80021be:	e8df f003 	tbb	[pc, r3]
 80021c2:	2c03      	.short	0x2c03
 80021c4:	6b50      	.short	0x6b50
 80021c6:	86          	.byte	0x86
 80021c7:	00          	.byte	0x00
		if(ArrayOfNumber[Zero] == 0)
 80021c8:	5ce2      	ldrb	r2, [r4, r3]
 80021ca:	bb02      	cbnz	r2, 800220e <InitOfLedScopeBoard+0x66>
			RESET_D1;
 80021cc:	4961      	ldr	r1, [pc, #388]	; (8002354 <InitOfLedScopeBoard+0x1ac>)
 80021ce:	698a      	ldr	r2, [r1, #24]
 80021d0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80021d4:	618a      	str	r2, [r1, #24]
		RESET_D2; RESET_D3; RESET_D4; RESET_D5; RESET_DP;
 80021d6:	4a60      	ldr	r2, [pc, #384]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 80021d8:	6991      	ldr	r1, [r2, #24]
 80021da:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80021de:	6191      	str	r1, [r2, #24]
 80021e0:	6991      	ldr	r1, [r2, #24]
 80021e2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80021e6:	6191      	str	r1, [r2, #24]
 80021e8:	6991      	ldr	r1, [r2, #24]
 80021ea:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80021ee:	6191      	str	r1, [r2, #24]
 80021f0:	6991      	ldr	r1, [r2, #24]
 80021f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80021f6:	6191      	str	r1, [r2, #24]
 80021f8:	6991      	ldr	r1, [r2, #24]
 80021fa:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80021fe:	6191      	str	r1, [r2, #24]
	Zero++;
 8002200:	3301      	adds	r3, #1
 8002202:	4a53      	ldr	r2, [pc, #332]	; (8002350 <InitOfLedScopeBoard+0x1a8>)
 8002204:	6013      	str	r3, [r2, #0]
	if(Zero==SizeOfLedDigitDisplay) //ОБНУЛЕНИЕ СЧЕТЧИКА
 8002206:	42ab      	cmp	r3, r5
 8002208:	f000 809d 	beq.w	8002346 <InitOfLedScopeBoard+0x19e>
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
			SET_D1;
 800220e:	4951      	ldr	r1, [pc, #324]	; (8002354 <InitOfLedScopeBoard+0x1ac>)
 8002210:	698a      	ldr	r2, [r1, #24]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	618a      	str	r2, [r1, #24]
 8002218:	e7dd      	b.n	80021d6 <InitOfLedScopeBoard+0x2e>
		if(ArrayOfNumber[Zero] == 0)
 800221a:	5ce2      	ldrb	r2, [r4, r3]
 800221c:	b9da      	cbnz	r2, 8002256 <InitOfLedScopeBoard+0xae>
			RESET_D2;
 800221e:	494e      	ldr	r1, [pc, #312]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 8002220:	698a      	ldr	r2, [r1, #24]
 8002222:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002226:	618a      	str	r2, [r1, #24]
		RESET_D1; RESET_D3; RESET_D4; RESET_D5; RESET_DP;
 8002228:	494a      	ldr	r1, [pc, #296]	; (8002354 <InitOfLedScopeBoard+0x1ac>)
 800222a:	698a      	ldr	r2, [r1, #24]
 800222c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002230:	618a      	str	r2, [r1, #24]
 8002232:	4a49      	ldr	r2, [pc, #292]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 8002234:	6991      	ldr	r1, [r2, #24]
 8002236:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800223a:	6191      	str	r1, [r2, #24]
 800223c:	6991      	ldr	r1, [r2, #24]
 800223e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002242:	6191      	str	r1, [r2, #24]
 8002244:	6991      	ldr	r1, [r2, #24]
 8002246:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800224a:	6191      	str	r1, [r2, #24]
 800224c:	6991      	ldr	r1, [r2, #24]
 800224e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002252:	6191      	str	r1, [r2, #24]
		break;
 8002254:	e7d4      	b.n	8002200 <InitOfLedScopeBoard+0x58>
			SET_D2;
 8002256:	4940      	ldr	r1, [pc, #256]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 8002258:	698a      	ldr	r2, [r1, #24]
 800225a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225e:	618a      	str	r2, [r1, #24]
 8002260:	e7e2      	b.n	8002228 <InitOfLedScopeBoard+0x80>
		RESET_D1; RESET_D2; SET_D3; RESET_D4; RESET_D5; SET_DP;
 8002262:	493c      	ldr	r1, [pc, #240]	; (8002354 <InitOfLedScopeBoard+0x1ac>)
 8002264:	698a      	ldr	r2, [r1, #24]
 8002266:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800226a:	618a      	str	r2, [r1, #24]
 800226c:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 800226e:	6991      	ldr	r1, [r2, #24]
 8002270:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002274:	6191      	str	r1, [r2, #24]
 8002276:	6991      	ldr	r1, [r2, #24]
 8002278:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800227c:	6191      	str	r1, [r2, #24]
 800227e:	6991      	ldr	r1, [r2, #24]
 8002280:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002284:	6191      	str	r1, [r2, #24]
 8002286:	6991      	ldr	r1, [r2, #24]
 8002288:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800228c:	6191      	str	r1, [r2, #24]
 800228e:	6991      	ldr	r1, [r2, #24]
 8002290:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002294:	6191      	str	r1, [r2, #24]
		break;
 8002296:	e7b3      	b.n	8002200 <InitOfLedScopeBoard+0x58>
		RESET_D1; RESET_D2; RESET_D3; SET_D4; RESET_D5;	RESET_DP;
 8002298:	492e      	ldr	r1, [pc, #184]	; (8002354 <InitOfLedScopeBoard+0x1ac>)
 800229a:	698a      	ldr	r2, [r1, #24]
 800229c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80022a0:	618a      	str	r2, [r1, #24]
 80022a2:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 80022a4:	6991      	ldr	r1, [r2, #24]
 80022a6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80022aa:	6191      	str	r1, [r2, #24]
 80022ac:	6991      	ldr	r1, [r2, #24]
 80022ae:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80022b2:	6191      	str	r1, [r2, #24]
 80022b4:	6991      	ldr	r1, [r2, #24]
 80022b6:	f041 0104 	orr.w	r1, r1, #4
 80022ba:	6191      	str	r1, [r2, #24]
 80022bc:	6991      	ldr	r1, [r2, #24]
 80022be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80022c2:	6191      	str	r1, [r2, #24]
 80022c4:	6991      	ldr	r1, [r2, #24]
 80022c6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80022ca:	6191      	str	r1, [r2, #24]
		break;
 80022cc:	e798      	b.n	8002200 <InitOfLedScopeBoard+0x58>
		RESET_D1; RESET_D2; RESET_D3; RESET_D4; RESET_B; RESET_C; RESET_F; RESET_G;	RESET_DP; SET_A; SET_F;	SET_E; SET_D; SET_D5;
 80022ce:	4821      	ldr	r0, [pc, #132]	; (8002354 <InitOfLedScopeBoard+0x1ac>)
 80022d0:	6982      	ldr	r2, [r0, #24]
 80022d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80022d6:	6182      	str	r2, [r0, #24]
 80022d8:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <InitOfLedScopeBoard+0x1b0>)
 80022da:	6991      	ldr	r1, [r2, #24]
 80022dc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80022e0:	6191      	str	r1, [r2, #24]
 80022e2:	6991      	ldr	r1, [r2, #24]
 80022e4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80022e8:	6191      	str	r1, [r2, #24]
 80022ea:	6991      	ldr	r1, [r2, #24]
 80022ec:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80022f0:	6191      	str	r1, [r2, #24]
 80022f2:	491a      	ldr	r1, [pc, #104]	; (800235c <InitOfLedScopeBoard+0x1b4>)
 80022f4:	698c      	ldr	r4, [r1, #24]
 80022f6:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 80022fa:	618c      	str	r4, [r1, #24]
 80022fc:	6984      	ldr	r4, [r0, #24]
 80022fe:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8002302:	6184      	str	r4, [r0, #24]
 8002304:	6990      	ldr	r0, [r2, #24]
 8002306:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800230a:	6190      	str	r0, [r2, #24]
 800230c:	6988      	ldr	r0, [r1, #24]
 800230e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002312:	6188      	str	r0, [r1, #24]
 8002314:	6990      	ldr	r0, [r2, #24]
 8002316:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800231a:	6190      	str	r0, [r2, #24]
 800231c:	6990      	ldr	r0, [r2, #24]
 800231e:	f040 0002 	orr.w	r0, r0, #2
 8002322:	6190      	str	r0, [r2, #24]
 8002324:	6990      	ldr	r0, [r2, #24]
 8002326:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800232a:	6190      	str	r0, [r2, #24]
 800232c:	6988      	ldr	r0, [r1, #24]
 800232e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002332:	6188      	str	r0, [r1, #24]
 8002334:	6988      	ldr	r0, [r1, #24]
 8002336:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800233a:	6188      	str	r0, [r1, #24]
 800233c:	6991      	ldr	r1, [r2, #24]
 800233e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002342:	6191      	str	r1, [r2, #24]
		break;
 8002344:	e75c      	b.n	8002200 <InitOfLedScopeBoard+0x58>
		Zero=0;
 8002346:	4613      	mov	r3, r2
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	e75e      	b.n	800220c <InitOfLedScopeBoard+0x64>
 800234e:	bf00      	nop
 8002350:	20000094 	.word	0x20000094
 8002354:	40020800 	.word	0x40020800
 8002358:	40020400 	.word	0x40020400
 800235c:	40020000 	.word	0x40020000

08002360 <ConvertingNumberIntoADigitalArray>:
{
 8002360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002364:	ec55 4b10 	vmov	r4, r5, d0
 8002368:	4606      	mov	r6, r0
	ArrayOfNumbers[0] = ((int)DigitalValue)/100; //сотни
 800236a:	ee10 0a10 	vmov	r0, s0
 800236e:	4629      	mov	r1, r5
 8002370:	f7fe fbb6 	bl	8000ae0 <__aeabi_d2iz>
 8002374:	4f19      	ldr	r7, [pc, #100]	; (80023dc <ConvertingNumberIntoADigitalArray+0x7c>)
 8002376:	fb87 2300 	smull	r2, r3, r7, r0
 800237a:	17c2      	asrs	r2, r0, #31
 800237c:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8002380:	7033      	strb	r3, [r6, #0]
	ArrayOfNumbers[1] = ((int)DigitalValue)%100/10; //десятки
 8002382:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002386:	fb08 0313 	mls	r3, r8, r3, r0
 800238a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80023e4 <ConvertingNumberIntoADigitalArray+0x84>
 800238e:	fb89 c103 	smull	ip, r1, r9, r3
 8002392:	17db      	asrs	r3, r3, #31
 8002394:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002398:	7073      	strb	r3, [r6, #1]
	ArrayOfNumbers[2] = ((int)DigitalValue)%10; //единицы
 800239a:	fb89 1300 	smull	r1, r3, r9, r0
 800239e:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 80023a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023a6:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80023aa:	70b3      	strb	r3, [r6, #2]
	ArrayOfNumbers[3] = ((int)(DigitalValue*100.0))%100/10; //десятые
 80023ac:	2200      	movs	r2, #0
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <ConvertingNumberIntoADigitalArray+0x80>)
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fe f8e4 	bl	8000580 <__aeabi_dmul>
 80023b8:	f7fe fb92 	bl	8000ae0 <__aeabi_d2iz>
 80023bc:	fb87 3700 	smull	r3, r7, r7, r0
 80023c0:	17c3      	asrs	r3, r0, #31
 80023c2:	ebc3 1767 	rsb	r7, r3, r7, asr #5
 80023c6:	fb08 0717 	mls	r7, r8, r7, r0
 80023ca:	fb89 3907 	smull	r3, r9, r9, r7
 80023ce:	17ff      	asrs	r7, r7, #31
 80023d0:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
 80023d4:	70f7      	strb	r7, [r6, #3]
}
 80023d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023da:	bf00      	nop
 80023dc:	51eb851f 	.word	0x51eb851f
 80023e0:	40590000 	.word	0x40590000
 80023e4:	66666667 	.word	0x66666667

080023e8 <TIM2_IRQHandler>:
{
 80023e8:	b510      	push	{r4, lr}
	if(TIM2->SR & TIM_SR_UIF)
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f013 0f01 	tst.w	r3, #1
 80023f4:	d005      	beq.n	8002402 <TIM2_IRQHandler+0x1a>
		TIM2->SR &= ~TIM_SR_UIF;
 80023f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023fa:	6913      	ldr	r3, [r2, #16]
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6113      	str	r3, [r2, #16]
	ConvertingNumberIntoADigitalArray(TempOfDisplay, massiv); //КОНВЕРТАЦИЯ ВЕЩЕСТВЕННОГО ЧИСЛА В МАССИВ ЦЕЛЫХ ЧИСЕЛ ДЛЯ ЦИФРОВОГО ДИСПЛЕЯ
 8002402:	4c06      	ldr	r4, [pc, #24]	; (800241c <TIM2_IRQHandler+0x34>)
 8002404:	4620      	mov	r0, r4
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <TIM2_IRQHandler+0x38>)
 8002408:	ed93 0b00 	vldr	d0, [r3]
 800240c:	f7ff ffa8 	bl	8002360 <ConvertingNumberIntoADigitalArray>
	InitOfLedScopeBoard(massiv, 5); //ВЫЗОВ ФУНКЦИИ ОТОБРАЖЕНИЯ ЦИФР ИЗ МАССИВА НА LED-ДИСПЛЕЕ
 8002410:	2105      	movs	r1, #5
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff fec8 	bl	80021a8 <InitOfLedScopeBoard>
}
 8002418:	bd10      	pop	{r4, pc}
 800241a:	bf00      	nop
 800241c:	200004c4 	.word	0x200004c4
 8002420:	200004d8 	.word	0x200004d8

08002424 <Init_GPIO>:
	RCC->AHB1ENR |= 255; //ВКЛЮЧЕНИЕ ТАКТИРОВАНИЯ ВСЕХ ПОРТОВ
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <Init_GPIO+0xdc>)
 8002426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002428:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1LPENR |= RCC_AHB1LPENR_GPIOBLPEN|RCC_AHB1LPENR_GPIOCLPEN|RCC_AHB1LPENR_GPIOALPEN;
 800242e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002430:	f042 0207 	orr.w	r2, r2, #7
 8002434:	651a      	str	r2, [r3, #80]	; 0x50
	GPIOA->PUPDR = 0;
 8002436:	f5a3 5360 	sub.w	r3, r3, #14336	; 0x3800
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
	GPIOA->OSPEEDR = 0;
 800243e:	609a      	str	r2, [r3, #8]
	GPIOA->OTYPER = 0;
 8002440:	605a      	str	r2, [r3, #4]
	GPIOC->MODER |= 0b01<<GPIO_MODER_MODE7_Pos; //PC7
 8002442:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002446:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800244a:	6811      	ldr	r1, [r2, #0]
 800244c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002450:	6011      	str	r1, [r2, #0]
	GPIOC->MODER |= 0b01<<GPIO_MODER_MODE9_Pos; //PC9
 8002452:	6811      	ldr	r1, [r2, #0]
 8002454:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8002458:	6011      	str	r1, [r2, #0]
	GPIOA->MODER |= 0b01<<GPIO_MODER_MODE9_Pos; //PA9
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002460:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE6_Pos; //PB6
 8002462:	4a28      	ldr	r2, [pc, #160]	; (8002504 <Init_GPIO+0xe0>)
 8002464:	6811      	ldr	r1, [r2, #0]
 8002466:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800246a:	6011      	str	r1, [r2, #0]
	GPIOA->MODER |= 0b01<<GPIO_MODER_MODE10_Pos; //PA10
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002472:	6019      	str	r1, [r3, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE3_Pos; //PB3
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800247a:	6011      	str	r1, [r2, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE8_Pos; //PB8
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002482:	6011      	str	r1, [r2, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE9_Pos; //PB9
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800248a:	6011      	str	r1, [r2, #0]
	GPIOA->MODER |= 0b01<<GPIO_MODER_MODE6_Pos; //PA6
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002492:	6019      	str	r1, [r3, #0]
	GPIOA->MODER |= 0b01<<GPIO_MODER_MODE7_Pos; //PA7
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800249a:	6019      	str	r1, [r3, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE13_Pos; //PB13
 800249c:	6811      	ldr	r1, [r2, #0]
 800249e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80024a2:	6011      	str	r1, [r2, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE14_Pos; //PB14
 80024a4:	6811      	ldr	r1, [r2, #0]
 80024a6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80024aa:	6011      	str	r1, [r2, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE15_Pos; //PB15
 80024ac:	6811      	ldr	r1, [r2, #0]
 80024ae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80024b2:	6011      	str	r1, [r2, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE1_Pos; //PB1
 80024b4:	6811      	ldr	r1, [r2, #0]
 80024b6:	f041 0104 	orr.w	r1, r1, #4
 80024ba:	6011      	str	r1, [r2, #0]
	GPIOB->MODER |= 0b01<<GPIO_MODER_MODE2_Pos; //PB2
 80024bc:	6811      	ldr	r1, [r2, #0]
 80024be:	f041 0110 	orr.w	r1, r1, #16
 80024c2:	6011      	str	r1, [r2, #0]
	GPIOA->MODER |= 0b01<<GPIO_MODER_MODE5_Pos; //НАСТРОЙКА ПОРТА  НА ВЫХОД
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80024ca:	6019      	str	r1, [r3, #0]
	GPIOA->OTYPER |= GPIO_OTYPER_OT5; //НАСТРОКА ПОРТА НА OPEN-DRAIN
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	f041 0120 	orr.w	r1, r1, #32
 80024d2:	6059      	str	r1, [r3, #4]
	GPIOA->OSPEEDR |= 0b11<<GPIO_OSPEEDR_OSPEED5_Pos; //НАСТРОЙКА МАКСИМАЛЬНОЙ СКОРОСТИ ПОРТА
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
 80024da:	6099      	str	r1, [r3, #8]
	GPIOA->MODER |= GPIO_MODER_MODE0; //НАСТРОЙКА ПОРТА А0 НА АНАЛОГОВЫЙ РЕЖИМ
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	f041 0103 	orr.w	r1, r1, #3
 80024e2:	6019      	str	r1, [r3, #0]
	GPIOA->PUPDR |= 0b00<<GPIO_PUPDR_PUPD0; //A0 НАСТРАИВАЕМ БЕЗ ПОДТЯГИВАНИЙ
 80024e4:	68d9      	ldr	r1, [r3, #12]
 80024e6:	60d9      	str	r1, [r3, #12]
	GPIOA->MODER |= GPIO_MODER_MODE1; //НАСТРОЙКА ПОРТА А1 НА АНАЛОГОВЫЙ РЕЖИМ
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	f041 010c 	orr.w	r1, r1, #12
 80024ee:	6019      	str	r1, [r3, #0]
	GPIOA->PUPDR |= 0b00<<GPIO_PUPDR_PUPD1; //A1 НАСТРАИВАЕМ БЕЗ ПОДТЯГИВАНИЙ
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	60d9      	str	r1, [r3, #12]
	GPIOB->MODER |= 0b00<<GPIO_MODER_MODER3_Pos; //НАСТРЙОКА НА ВЫВОД
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR |= 0b00<<GPIO_OSPEEDR_OSPEED3_Pos; //LOW SPEED
 80024f8:	6893      	ldr	r3, [r2, #8]
 80024fa:	6093      	str	r3, [r2, #8]
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40020400 	.word	0x40020400

08002508 <Init_SPI>:
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN; //включение тактирвоания для SPI3
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <Init_SPI+0x74>)
 800250a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
	SPI3->CR1 |= (0b111<<SPI_CR1_BR_Pos); //выбор предделителя 16
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <Init_SPI+0x78>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800251a:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_CPHA;//фаза 1
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_CPOL;//полярность 1
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f042 0202 	orr.w	r2, r2, #2
 800252a:	601a      	str	r2, [r3, #0]
	SPI3->CR1 &= ~SPI_CR1_RXONLY; //выбор дуплексного режима
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	601a      	str	r2, [r3, #0]
	SPI3->CR1 &= ~SPI_CR1_BIDIMODE; //выбор двухнаправленной передачи
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800253a:	601a      	str	r2, [r3, #0]
	SPI3->CR1 &= ~SPI_CR1_LSBFIRST; //выбор формата MSB
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002542:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_SSM;
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_SSI;
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002552:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_MSTR; //установка статуса микроконтроллера в МАСТЕР
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	f042 0204 	orr.w	r2, r2, #4
 800255a:	601a      	str	r2, [r3, #0]
	SPI3->CR1 &= ~SPI_CR1_DFF; //выбор формата обмена 8 бит
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	601a      	str	r2, [r3, #0]
	SPI3->CR1 |= SPI_CR1_SPE;
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256a:	601a      	str	r2, [r3, #0]
	SPI3->CR2 = 0;
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
	SPI3->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002576:	61da      	str	r2, [r3, #28]
}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40003c00 	.word	0x40003c00

08002584 <_Error_Handler>:

void _Error_Handler(char * file, int line)
{

  while(1) 
 8002584:	e7fe      	b.n	8002584 <_Error_Handler>
	...

08002588 <SystemClock_Config>:
{
 8002588:	b500      	push	{lr}
 800258a:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	2200      	movs	r2, #0
 800258e:	9200      	str	r2, [sp, #0]
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <SystemClock_Config+0xc8>)
 8002592:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002594:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002598:	6419      	str	r1, [r3, #64]	; 0x40
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a4:	9201      	str	r2, [sp, #4]
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <SystemClock_Config+0xcc>)
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025ba:	2302      	movs	r3, #2
 80025bc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025be:	2101      	movs	r1, #1
 80025c0:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80025c2:	2110      	movs	r1, #16
 80025c4:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025c8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025ca:	2208      	movs	r2, #8
 80025cc:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80025ce:	22b4      	movs	r2, #180	; 0xb4
 80025d0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025d4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025d6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d8:	a807      	add	r0, sp, #28
 80025da:	f7fe fe97 	bl	800130c <HAL_RCC_OscConfig>
 80025de:	bb38      	cbnz	r0, 8002630 <SystemClock_Config+0xa8>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025e0:	f7fe fd12 	bl	8001008 <HAL_PWREx_EnableOverDrive>
 80025e4:	bb48      	cbnz	r0, 800263a <SystemClock_Config+0xb2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	230f      	movs	r3, #15
 80025e8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ea:	2302      	movs	r3, #2
 80025ec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025f6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fc:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025fe:	2105      	movs	r1, #5
 8002600:	a802      	add	r0, sp, #8
 8002602:	f7fe fd41 	bl	8001088 <HAL_RCC_ClockConfig>
 8002606:	b9e8      	cbnz	r0, 8002644 <SystemClock_Config+0xbc>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002608:	f7fe fdee 	bl	80011e8 <HAL_RCC_GetHCLKFreq>
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <SystemClock_Config+0xd0>)
 800260e:	fba3 3000 	umull	r3, r0, r3, r0
 8002612:	0980      	lsrs	r0, r0, #6
 8002614:	f7fe fccc 	bl	8000fb0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002618:	2004      	movs	r0, #4
 800261a:	f7fe fcdf 	bl	8000fdc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	4611      	mov	r1, r2
 8002622:	f04f 30ff 	mov.w	r0, #4294967295
 8002626:	f7fe fc81 	bl	8000f2c <HAL_NVIC_SetPriority>
}
 800262a:	b015      	add	sp, #84	; 0x54
 800262c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002630:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <SystemClock_Config+0xd4>)
 8002636:	f7ff ffa5 	bl	8002584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800263a:	f240 1185 	movw	r1, #389	; 0x185
 800263e:	4807      	ldr	r0, [pc, #28]	; (800265c <SystemClock_Config+0xd4>)
 8002640:	f7ff ffa0 	bl	8002584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002644:	f240 1193 	movw	r1, #403	; 0x193
 8002648:	4804      	ldr	r0, [pc, #16]	; (800265c <SystemClock_Config+0xd4>)
 800264a:	f7ff ff9b 	bl	8002584 <_Error_Handler>
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40007000 	.word	0x40007000
 8002658:	10624dd3 	.word	0x10624dd3
 800265c:	08002bd0 	.word	0x08002bd0

08002660 <main>:
{
 8002660:	b508      	push	{r3, lr}
	  PolinomArray500[0] = 0.0;
 8002662:	4b83      	ldr	r3, [pc, #524]	; (8002870 <main+0x210>)
 8002664:	2000      	movs	r0, #0
 8002666:	2100      	movs	r1, #0
 8002668:	e9c3 0100 	strd	r0, r1, [r3]
	  PolinomArray500[1] = 2.508355 * 10.0;
 800266c:	a160      	add	r1, pc, #384	; (adr r1, 80027f0 <main+0x190>)
 800266e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002672:	e9c3 0102 	strd	r0, r1, [r3, #8]
	  PolinomArray500[2] = 7.860106 * 0.01; // pow(10,-2);
 8002676:	a160      	add	r1, pc, #384	; (adr r1, 80027f8 <main+0x198>)
 8002678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800267c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	  PolinomArray500[3] = -2.503131 * 0.1; // pow(10,-1);
 8002680:	a15f      	add	r1, pc, #380	; (adr r1, 8002800 <main+0x1a0>)
 8002682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002686:	e9c3 0106 	strd	r0, r1, [r3, #24]
	  PolinomArray500[4] = 8.315270 * 0.01; // pow(10,-2);
 800268a:	a15f      	add	r1, pc, #380	; (adr r1, 8002808 <main+0x1a8>)
 800268c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002690:	e9c3 0108 	strd	r0, r1, [r3, #32]
	  PolinomArray500[5] = -1.228034 * 0.01; // pow(10,-2);
 8002694:	a15e      	add	r1, pc, #376	; (adr r1, 8002810 <main+0x1b0>)
 8002696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800269a:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	  PolinomArray500[6] = 9.804036 * 0.0001; // pow(10,-4);
 800269e:	a15e      	add	r1, pc, #376	; (adr r1, 8002818 <main+0x1b8>)
 80026a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026a4:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
	  PolinomArray500[7] = -4.413030 * 0.00001; // pow(10,-5);
 80026a8:	a15d      	add	r1, pc, #372	; (adr r1, 8002820 <main+0x1c0>)
 80026aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ae:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
	  PolinomArray500[8] = 1.057734 * 0.000001; // pow(10,-6);
 80026b2:	a15d      	add	r1, pc, #372	; (adr r1, 8002828 <main+0x1c8>)
 80026b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b8:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
	  PolinomArray500[9] = -1.052755 * 0.00000001; // pow(10,-8);
 80026bc:	a15c      	add	r1, pc, #368	; (adr r1, 8002830 <main+0x1d0>)
 80026be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026c2:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	  PolinomArray1372[0] = -1.318058 * 100; // pow(10,2);
 80026c6:	4b6b      	ldr	r3, [pc, #428]	; (8002874 <main+0x214>)
 80026c8:	a15b      	add	r1, pc, #364	; (adr r1, 8002838 <main+0x1d8>)
 80026ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ce:	e9c3 0100 	strd	r0, r1, [r3]
	  PolinomArray1372[1] = 4.830222 * 10; // pow(10,1);
 80026d2:	a15b      	add	r1, pc, #364	; (adr r1, 8002840 <main+0x1e0>)
 80026d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
	  PolinomArray1372[2] = -1.646031;
 80026dc:	a15a      	add	r1, pc, #360	; (adr r1, 8002848 <main+0x1e8>)
 80026de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	  PolinomArray1372[3] = 5.464731 * 0.01; // pow(10,-2);
 80026e6:	a15a      	add	r1, pc, #360	; (adr r1, 8002850 <main+0x1f0>)
 80026e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ec:	e9c3 0106 	strd	r0, r1, [r3, #24]
	  PolinomArray1372[4] = -9.650715 * 0.0001; //pow(10,-4);
 80026f0:	a159      	add	r1, pc, #356	; (adr r1, 8002858 <main+0x1f8>)
 80026f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026f6:	e9c3 0108 	strd	r0, r1, [r3, #32]
	  PolinomArray1372[5] = 8.802193 * 0.000001; //pow(10,-6);
 80026fa:	a159      	add	r1, pc, #356	; (adr r1, 8002860 <main+0x200>)
 80026fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002700:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	  PolinomArray1372[6] = -3.110810 * 0.00000001; // pow(10,-8);
 8002704:	a158      	add	r1, pc, #352	; (adr r1, 8002868 <main+0x208>)
 8002706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800270a:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
	  HAL_Init();
 800270e:	f7fe fbcf 	bl	8000eb0 <HAL_Init>
	  SystemClock_Config();
 8002712:	f7ff ff39 	bl	8002588 <SystemClock_Config>
	  MX_GPIO_Init();
 8002716:	f7ff fb9f 	bl	8001e58 <MX_GPIO_Init>
	  Init_GPIO();
 800271a:	f7ff fe83 	bl	8002424 <Init_GPIO>
	  Init_SPI();
 800271e:	f7ff fef3 	bl	8002508 <Init_SPI>
	  Init_ADC1();
 8002722:	f7ff f813 	bl	800174c <Init_ADC1>
	  Init_Timer2();
 8002726:	f7ff fa3b 	bl	8001ba0 <Init_Timer2>
	  Init_Timer3();
 800272a:	f7ff fa5b 	bl	8001be4 <Init_Timer3>
	  Timer_Start(TIM2);
 800272e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002732:	6813      	ldr	r3, [r2, #0]
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]
	  Timer_Start(TIM3);
 800273a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6013      	str	r3, [r2, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <main+0x218>)
 8002748:	2200      	movs	r2, #0
 800274a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 800274e:	2210      	movs	r2, #16
 8002750:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
	  SET_A;
 8002754:	4b49      	ldr	r3, [pc, #292]	; (800287c <main+0x21c>)
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	f042 0202 	orr.w	r2, r2, #2
 800275c:	619a      	str	r2, [r3, #24]
	  SET_B;
 800275e:	4a48      	ldr	r2, [pc, #288]	; (8002880 <main+0x220>)
 8002760:	6991      	ldr	r1, [r2, #24]
 8002762:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002766:	6191      	str	r1, [r2, #24]
	  SET_C;
 8002768:	4946      	ldr	r1, [pc, #280]	; (8002884 <main+0x224>)
 800276a:	6988      	ldr	r0, [r1, #24]
 800276c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002770:	6188      	str	r0, [r1, #24]
	  SET_D;
 8002772:	6990      	ldr	r0, [r2, #24]
 8002774:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002778:	6190      	str	r0, [r2, #24]
	  SET_E;
 800277a:	6990      	ldr	r0, [r2, #24]
 800277c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002780:	6190      	str	r0, [r2, #24]
	  SET_F;
 8002782:	6998      	ldr	r0, [r3, #24]
 8002784:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002788:	6198      	str	r0, [r3, #24]
	  SET_G;
 800278a:	6990      	ldr	r0, [r2, #24]
 800278c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8002790:	6190      	str	r0, [r2, #24]
	  SET_DP;
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002798:	619a      	str	r2, [r3, #24]
	  SET_D1;
 800279a:	698a      	ldr	r2, [r1, #24]
 800279c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a0:	618a      	str	r2, [r1, #24]
	  SET_D2;
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a8:	619a      	str	r2, [r3, #24]
	  SET_D3;
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	619a      	str	r2, [r3, #24]
	  SET_D4;
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	f042 0204 	orr.w	r2, r2, #4
 80027b8:	619a      	str	r2, [r3, #24]
	  SET_D5;
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c0:	619a      	str	r2, [r3, #24]
	  RESET_D1;
 80027c2:	698a      	ldr	r2, [r1, #24]
 80027c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80027c8:	618a      	str	r2, [r1, #24]
	  RESET_D2;
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80027d0:	619a      	str	r2, [r3, #24]
	  RESET_D3;
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80027d8:	619a      	str	r2, [r3, #24]
	  RESET_D4;
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027e0:	619a      	str	r2, [r3, #24]
	  RESET_D5;
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027e8:	619a      	str	r2, [r3, #24]
  while (1)
 80027ea:	e7fe      	b.n	80027ea <main+0x18a>
 80027ec:	f3af 8000 	nop.w
 80027f0:	886594af 	.word	0x886594af
 80027f4:	40391563 	.word	0x40391563
 80027f8:	f62184e0 	.word	0xf62184e0
 80027fc:	3fb41f32 	.word	0x3fb41f32
 8002800:	3c90aa07 	.word	0x3c90aa07
 8002804:	bfd00521 	.word	0xbfd00521
 8002808:	cf12f82a 	.word	0xcf12f82a
 800280c:	3fb5497e 	.word	0x3fb5497e
 8002810:	55785780 	.word	0x55785780
 8002814:	bf89266f 	.word	0xbf89266f
 8002818:	598742c6 	.word	0x598742c6
 800281c:	3f50101c 	.word	0x3f50101c
 8002820:	8fe5dfc6 	.word	0x8fe5dfc6
 8002824:	bf072311 	.word	0xbf072311
 8002828:	d5041d19 	.word	0xd5041d19
 800282c:	3eb1beee 	.word	0x3eb1beee
 8002830:	f20e972b 	.word	0xf20e972b
 8002834:	be469b94 	.word	0xbe469b94
 8002838:	1d14e3bd 	.word	0x1d14e3bd
 800283c:	c06079c9 	.word	0xc06079c9
 8002840:	251c193b 	.word	0x251c193b
 8002844:	404826af 	.word	0x404826af
 8002848:	9a133c1d 	.word	0x9a133c1d
 800284c:	bffa5624 	.word	0xbffa5624
 8002850:	72875bff 	.word	0x72875bff
 8002854:	3fabfabb 	.word	0x3fabfabb
 8002858:	43f14f16 	.word	0x43f14f16
 800285c:	bf4f9f9b 	.word	0xbf4f9f9b
 8002860:	31b5afb7 	.word	0x31b5afb7
 8002864:	3ee275a4 	.word	0x3ee275a4
 8002868:	f722eba7 	.word	0xf722eba7
 800286c:	be60b376 	.word	0xbe60b376
 8002870:	20000470 	.word	0x20000470
 8002874:	200004e0 	.word	0x200004e0
 8002878:	e000e100 	.word	0xe000e100
 800287c:	40020400 	.word	0x40020400
 8002880:	40020000 	.word	0x40020000
 8002884:	40020800 	.word	0x40020800

08002888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800288a:	2003      	movs	r0, #3
 800288c:	f7fe fb3c 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	4611      	mov	r1, r2
 8002894:	f06f 000b 	mvn.w	r0, #11
 8002898:	f7fe fb48 	bl	8000f2c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	4611      	mov	r1, r2
 80028a0:	f06f 000a 	mvn.w	r0, #10
 80028a4:	f7fe fb42 	bl	8000f2c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	4611      	mov	r1, r2
 80028ac:	f06f 0009 	mvn.w	r0, #9
 80028b0:	f7fe fb3c 	bl	8000f2c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	4611      	mov	r1, r2
 80028b8:	f06f 0004 	mvn.w	r0, #4
 80028bc:	f7fe fb36 	bl	8000f2c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	4611      	mov	r1, r2
 80028c4:	f06f 0003 	mvn.w	r0, #3
 80028c8:	f7fe fb30 	bl	8000f2c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	4611      	mov	r1, r2
 80028d0:	f06f 0001 	mvn.w	r0, #1
 80028d4:	f7fe fb2a 	bl	8000f2c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	4611      	mov	r1, r2
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7fe fb24 	bl	8000f2c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	4611      	mov	r1, r2
 80028e8:	2005      	movs	r0, #5
 80028ea:	f7fe fb1f 	bl	8000f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80028ee:	2005      	movs	r0, #5
 80028f0:	f7fe fb50 	bl	8000f94 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f4:	bd08      	pop	{r3, pc}

080028f6 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028f6:	4770      	bx	lr

080028f8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <HardFault_Handler>

080028fa <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <MemManage_Handler>

080028fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <BusFault_Handler>

080028fe <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <UsageFault_Handler>

08002900 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002900:	4770      	bx	lr

08002902 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002902:	4770      	bx	lr

08002904 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002904:	4770      	bx	lr

08002906 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002906:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f7fe faec 	bl	8000ee4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800290c:	f7fe fb77 	bl	8000ffe <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002910:	bd08      	pop	{r3, pc}

08002912 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002912:	4770      	bx	lr

08002914 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <SystemInit+0x10>)
 8002916:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800291a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800291e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800292c:	480d      	ldr	r0, [pc, #52]	; (8002964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800292e:	490e      	ldr	r1, [pc, #56]	; (8002968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002930:	4a0e      	ldr	r2, [pc, #56]	; (800296c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002944:	4c0b      	ldr	r4, [pc, #44]	; (8002974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002952:	f7ff ffdf 	bl	8002914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f000 f811 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295a:	f7ff fe81 	bl	8002660 <main>
  bx  lr    
 800295e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002968:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800296c:	08002bf0 	.word	0x08002bf0
  ldr r2, =_sbss
 8002970:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002974:	20000518 	.word	0x20000518

08002978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC_IRQHandler>
	...

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 f906 	bl	8002ba0 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08002be8 	.word	0x08002be8
 80029b8:	08002be8 	.word	0x08002be8
 80029bc:	08002be8 	.word	0x08002be8
 80029c0:	08002bec 	.word	0x08002bec

080029c4 <sqrt>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	ed2d 8b02 	vpush	{d8}
 80029ca:	ec55 4b10 	vmov	r4, r5, d0
 80029ce:	f000 f82d 	bl	8002a2c <__ieee754_sqrt>
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <sqrt+0x64>)
 80029d4:	eeb0 8a40 	vmov.f32	s16, s0
 80029d8:	eef0 8a60 	vmov.f32	s17, s1
 80029dc:	f993 3000 	ldrsb.w	r3, [r3]
 80029e0:	3301      	adds	r3, #1
 80029e2:	d019      	beq.n	8002a18 <sqrt+0x54>
 80029e4:	4622      	mov	r2, r4
 80029e6:	462b      	mov	r3, r5
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fe f862 	bl	8000ab4 <__aeabi_dcmpun>
 80029f0:	b990      	cbnz	r0, 8002a18 <sqrt+0x54>
 80029f2:	2200      	movs	r2, #0
 80029f4:	2300      	movs	r3, #0
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fe f833 	bl	8000a64 <__aeabi_dcmplt>
 80029fe:	b158      	cbz	r0, 8002a18 <sqrt+0x54>
 8002a00:	f000 f8c8 	bl	8002b94 <__errno>
 8002a04:	2321      	movs	r3, #33	; 0x21
 8002a06:	6003      	str	r3, [r0, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f7fd fee0 	bl	80007d4 <__aeabi_ddiv>
 8002a14:	ec41 0b18 	vmov	d8, r0, r1
 8002a18:	eeb0 0a48 	vmov.f32	s0, s16
 8002a1c:	eef0 0a68 	vmov.f32	s1, s17
 8002a20:	ecbd 8b02 	vpop	{d8}
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
 8002a26:	bf00      	nop
 8002a28:	20000070 	.word	0x20000070

08002a2c <__ieee754_sqrt>:
 8002a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a30:	ec55 4b10 	vmov	r4, r5, d0
 8002a34:	4e56      	ldr	r6, [pc, #344]	; (8002b90 <__ieee754_sqrt+0x164>)
 8002a36:	43ae      	bics	r6, r5
 8002a38:	ee10 0a10 	vmov	r0, s0
 8002a3c:	ee10 3a10 	vmov	r3, s0
 8002a40:	4629      	mov	r1, r5
 8002a42:	462a      	mov	r2, r5
 8002a44:	d110      	bne.n	8002a68 <__ieee754_sqrt+0x3c>
 8002a46:	ee10 2a10 	vmov	r2, s0
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	f7fd fd98 	bl	8000580 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4620      	mov	r0, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7fd fbdc 	bl	8000214 <__adddf3>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	460d      	mov	r5, r1
 8002a60:	ec45 4b10 	vmov	d0, r4, r5
 8002a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	dc10      	bgt.n	8002a8e <__ieee754_sqrt+0x62>
 8002a6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002a70:	4330      	orrs	r0, r6
 8002a72:	d0f5      	beq.n	8002a60 <__ieee754_sqrt+0x34>
 8002a74:	b15d      	cbz	r5, 8002a8e <__ieee754_sqrt+0x62>
 8002a76:	ee10 2a10 	vmov	r2, s0
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	ee10 0a10 	vmov	r0, s0
 8002a80:	f7fd fbc6 	bl	8000210 <__aeabi_dsub>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	f7fd fea4 	bl	80007d4 <__aeabi_ddiv>
 8002a8c:	e7e6      	b.n	8002a5c <__ieee754_sqrt+0x30>
 8002a8e:	1509      	asrs	r1, r1, #20
 8002a90:	d076      	beq.n	8002b80 <__ieee754_sqrt+0x154>
 8002a92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002a96:	07ce      	lsls	r6, r1, #31
 8002a98:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8002a9c:	bf5e      	ittt	pl
 8002a9e:	0fda      	lsrpl	r2, r3, #31
 8002aa0:	005b      	lslpl	r3, r3, #1
 8002aa2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8002aa6:	0fda      	lsrs	r2, r3, #31
 8002aa8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8002aac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	106d      	asrs	r5, r5, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	f04f 0e16 	mov.w	lr, #22
 8002aba:	4684      	mov	ip, r0
 8002abc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ac0:	eb0c 0401 	add.w	r4, ip, r1
 8002ac4:	4294      	cmp	r4, r2
 8002ac6:	bfde      	ittt	le
 8002ac8:	1b12      	suble	r2, r2, r4
 8002aca:	eb04 0c01 	addle.w	ip, r4, r1
 8002ace:	1840      	addle	r0, r0, r1
 8002ad0:	0052      	lsls	r2, r2, #1
 8002ad2:	f1be 0e01 	subs.w	lr, lr, #1
 8002ad6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002ada:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002ade:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ae2:	d1ed      	bne.n	8002ac0 <__ieee754_sqrt+0x94>
 8002ae4:	4671      	mov	r1, lr
 8002ae6:	2720      	movs	r7, #32
 8002ae8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002aec:	4562      	cmp	r2, ip
 8002aee:	eb04 060e 	add.w	r6, r4, lr
 8002af2:	dc02      	bgt.n	8002afa <__ieee754_sqrt+0xce>
 8002af4:	d113      	bne.n	8002b1e <__ieee754_sqrt+0xf2>
 8002af6:	429e      	cmp	r6, r3
 8002af8:	d811      	bhi.n	8002b1e <__ieee754_sqrt+0xf2>
 8002afa:	2e00      	cmp	r6, #0
 8002afc:	eb06 0e04 	add.w	lr, r6, r4
 8002b00:	da43      	bge.n	8002b8a <__ieee754_sqrt+0x15e>
 8002b02:	f1be 0f00 	cmp.w	lr, #0
 8002b06:	db40      	blt.n	8002b8a <__ieee754_sqrt+0x15e>
 8002b08:	f10c 0801 	add.w	r8, ip, #1
 8002b0c:	eba2 020c 	sub.w	r2, r2, ip
 8002b10:	429e      	cmp	r6, r3
 8002b12:	bf88      	it	hi
 8002b14:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8002b18:	1b9b      	subs	r3, r3, r6
 8002b1a:	4421      	add	r1, r4
 8002b1c:	46c4      	mov	ip, r8
 8002b1e:	0052      	lsls	r2, r2, #1
 8002b20:	3f01      	subs	r7, #1
 8002b22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002b26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8002b2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002b2e:	d1dd      	bne.n	8002aec <__ieee754_sqrt+0xc0>
 8002b30:	4313      	orrs	r3, r2
 8002b32:	d006      	beq.n	8002b42 <__ieee754_sqrt+0x116>
 8002b34:	1c4c      	adds	r4, r1, #1
 8002b36:	bf13      	iteet	ne
 8002b38:	3101      	addne	r1, #1
 8002b3a:	3001      	addeq	r0, #1
 8002b3c:	4639      	moveq	r1, r7
 8002b3e:	f021 0101 	bicne.w	r1, r1, #1
 8002b42:	1043      	asrs	r3, r0, #1
 8002b44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002b48:	0849      	lsrs	r1, r1, #1
 8002b4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002b4e:	07c2      	lsls	r2, r0, #31
 8002b50:	bf48      	it	mi
 8002b52:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002b56:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	463d      	mov	r5, r7
 8002b5e:	e77f      	b.n	8002a60 <__ieee754_sqrt+0x34>
 8002b60:	0ada      	lsrs	r2, r3, #11
 8002b62:	3815      	subs	r0, #21
 8002b64:	055b      	lsls	r3, r3, #21
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d0fa      	beq.n	8002b60 <__ieee754_sqrt+0x134>
 8002b6a:	02d7      	lsls	r7, r2, #11
 8002b6c:	d50a      	bpl.n	8002b84 <__ieee754_sqrt+0x158>
 8002b6e:	f1c1 0420 	rsb	r4, r1, #32
 8002b72:	fa23 f404 	lsr.w	r4, r3, r4
 8002b76:	1e4d      	subs	r5, r1, #1
 8002b78:	408b      	lsls	r3, r1
 8002b7a:	4322      	orrs	r2, r4
 8002b7c:	1b41      	subs	r1, r0, r5
 8002b7e:	e788      	b.n	8002a92 <__ieee754_sqrt+0x66>
 8002b80:	4608      	mov	r0, r1
 8002b82:	e7f0      	b.n	8002b66 <__ieee754_sqrt+0x13a>
 8002b84:	0052      	lsls	r2, r2, #1
 8002b86:	3101      	adds	r1, #1
 8002b88:	e7ef      	b.n	8002b6a <__ieee754_sqrt+0x13e>
 8002b8a:	46e0      	mov	r8, ip
 8002b8c:	e7be      	b.n	8002b0c <__ieee754_sqrt+0xe0>
 8002b8e:	bf00      	nop
 8002b90:	7ff00000 	.word	0x7ff00000

08002b94 <__errno>:
 8002b94:	4b01      	ldr	r3, [pc, #4]	; (8002b9c <__errno+0x8>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c

08002ba0 <_init>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr

08002bac <_fini>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr
